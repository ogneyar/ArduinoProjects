
attiny13-uart-china2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000014a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005db  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004ae  00000000  00000000  00000853  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e6  00000000  00000000  00000d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013f  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000014ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ea e4       	ldi	r30, 0x4A	; 74
  24:	f1 e0       	ldi	r31, 0x01	; 1
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a6 37       	cpi	r26, 0x76	; 118
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>
  32:	35 d0       	rcall	.+106    	; 0x9e <main>
  34:	88 c0       	rjmp	.+272    	; 0x146 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <_Z11bit_bang_txh>:


//----------- функция отправки байта ------------------------
void bit_bang_tx(unsigned char data) {
	unsigned char i;
	uart_PORT &=~ (1<<uart_PIN);         // старт бит
  38:	c1 98       	cbi	0x18, 1	; 24
	TCNT0 = 0;
  3a:	12 be       	out	0x32, r1	; 50
	while (TCNT0 < uart_delay); // ожидаем 
  3c:	92 b7       	in	r25, 0x32	; 50
  3e:	9f 31       	cpi	r25, 0x1F	; 31
  40:	e8 f3       	brcs	.-6      	; 0x3c <_Z11bit_bang_txh+0x4>
  42:	20 e0       	ldi	r18, 0x00	; 0
  44:	30 e0       	ldi	r19, 0x00	; 0
	for (i = 0; i < 8; i++) { // отправка с младщего бита
		if (data & (0x01 << i)) uart_PORT |= (1<<uart_PIN);
  46:	48 2f       	mov	r20, r24
  48:	50 e0       	ldi	r21, 0x00	; 0
  4a:	ca 01       	movw	r24, r20
  4c:	02 2e       	mov	r0, r18
  4e:	02 c0       	rjmp	.+4      	; 0x54 <__SREG__+0x15>
  50:	95 95       	asr	r25
  52:	87 95       	ror	r24
  54:	0a 94       	dec	r0
  56:	e2 f7       	brpl	.-8      	; 0x50 <__SREG__+0x11>
  58:	80 ff       	sbrs	r24, 0
  5a:	02 c0       	rjmp	.+4      	; 0x60 <__SREG__+0x21>
  5c:	c1 9a       	sbi	0x18, 1	; 24
  5e:	01 c0       	rjmp	.+2      	; 0x62 <__SREG__+0x23>
		else uart_PORT &=~ (1<<uart_PIN);
  60:	c1 98       	cbi	0x18, 1	; 24
		while (TCNT0 < uart_delay); // ожидаем
  62:	82 b7       	in	r24, 0x32	; 50
  64:	8f 31       	cpi	r24, 0x1F	; 31
  66:	e8 f3       	brcs	.-6      	; 0x62 <__SREG__+0x23>
  68:	2f 5f       	subi	r18, 0xFF	; 255
  6a:	3f 4f       	sbci	r19, 0xFF	; 255
void bit_bang_tx(unsigned char data) {
	unsigned char i;
	uart_PORT &=~ (1<<uart_PIN);         // старт бит
	TCNT0 = 0;
	while (TCNT0 < uart_delay); // ожидаем 
	for (i = 0; i < 8; i++) { // отправка с младщего бита
  6c:	28 30       	cpi	r18, 0x08	; 8
  6e:	31 05       	cpc	r19, r1
  70:	61 f7       	brne	.-40     	; 0x4a <__SREG__+0xb>
		if (data & (0x01 << i)) uart_PORT |= (1<<uart_PIN);
		else uart_PORT &=~ (1<<uart_PIN);
		while (TCNT0 < uart_delay); // ожидаем
	}
	uart_PORT |= (1<<uart_PIN);        // стоп бит
  72:	c1 9a       	sbi	0x18, 1	; 24
	while (TCNT0 < uart_delay); // ожидаем 
  74:	82 b7       	in	r24, 0x32	; 50
  76:	8f 31       	cpi	r24, 0x1F	; 31
  78:	e8 f3       	brcs	.-6      	; 0x74 <__SREG__+0x35>
}
  7a:	08 95       	ret

0000007c <_Z15bit_bang_tx_strPc>:
//-----------------------------------------------------------

//------------- фунция отправки строки-----------------------
void bit_bang_tx_str(char *str) {
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	ec 01       	movw	r28, r24
	while (*str) bit_bang_tx(*str++);
  82:	88 81       	ld	r24, Y
  84:	88 23       	and	r24, r24
  86:	29 f0       	breq	.+10     	; 0x92 <_Z15bit_bang_tx_strPc+0x16>
  88:	21 96       	adiw	r28, 0x01	; 1
  8a:	d6 df       	rcall	.-84     	; 0x38 <_Z11bit_bang_txh>
  8c:	89 91       	ld	r24, Y+
  8e:	81 11       	cpse	r24, r1
  90:	fc cf       	rjmp	.-8      	; 0x8a <_Z15bit_bang_tx_strPc+0xe>
}
  92:	df 91       	pop	r29
  94:	cf 91       	pop	r28
  96:	08 95       	ret

00000098 <_Z9uart_initv>:
//------------------------------------------------------------


//-------------- просто инициализация------------------------
void uart_init() {
	uart_DDR |= (1<<uart_PIN);
  98:	b9 9a       	sbi	0x17, 1	; 23
	uart_PORT |= (1<<uart_PIN);
  9a:	c1 9a       	sbi	0x18, 1	; 24
  9c:	08 95       	ret

0000009e <main>:
}
//-----------------------------------------------------------


int main(void) {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	dd 27       	eor	r29, r29
  a6:	ca 50       	subi	r28, 0x0A	; 10
  a8:	cd bf       	out	0x3d, r28	; 61
	
	TCCR0A = 0x02;  // таймер вкючаем в режим CTC
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = 0x02;  // делитель на 8
  ae:	83 bf       	out	0x33, r24	; 51
	OCR0A  = uart_delay; // регистр сравнения
  b0:	8f e1       	ldi	r24, 0x1F	; 31
  b2:	86 bf       	out	0x36, r24	; 54
	
	unsigned char number=0; // имитация данных
	char str[10]; // массив для строки.
	
	uart_init(); // инициализируем уарт
  b4:	f1 df       	rcall	.-30     	; 0x98 <_Z9uart_initv>
	
	TCCR0A = 0x02;  // таймер вкючаем в режим CTC
	TCCR0B = 0x02;  // делитель на 8
	OCR0A  = uart_delay; // регистр сравнения
	
	unsigned char number=0; // имитация данных
  b6:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
  b8:	4a e0       	ldi	r20, 0x0A	; 10
  ba:	be 01       	movw	r22, r28
  bc:	6f 5f       	subi	r22, 0xFF	; 255
  be:	7f 4f       	sbci	r23, 0xFF	; 255
  c0:	81 2f       	mov	r24, r17
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	17 d0       	rcall	.+46     	; 0xf4 <__utoa_ncheck>
	
	while (1) {
		

		utoa(number, str, 10); // конвертируем данные в строку
		bit_bang_tx_str((char *)str); // отправляем данные в сериал 
  c6:	ce 01       	movw	r24, r28
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	d8 df       	rcall	.-80     	; 0x7c <_Z15bit_bang_tx_strPc>
		bit_bang_tx_str("\r\n"); // символы перехода на новую строку
  cc:	80 e6       	ldi	r24, 0x60	; 96
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	d5 df       	rcall	.-86     	; 0x7c <_Z15bit_bang_tx_strPc>
		bit_bang_tx_str("я шлю всех в порт"); // отправка текстовой информации в порт
  d2:	83 e6       	ldi	r24, 0x63	; 99
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	d2 df       	rcall	.-92     	; 0x7c <_Z15bit_bang_tx_strPc>
		bit_bang_tx_str("\r\n"); // снова переход на новую строку
  d8:	80 e6       	ldi	r24, 0x60	; 96
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	cf df       	rcall	.-98     	; 0x7c <_Z15bit_bang_tx_strPc>
		number++; // увеличиваем переменную на 1
  de:	1f 5f       	subi	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f e7       	ldi	r18, 0x7F	; 127
  e2:	89 ea       	ldi	r24, 0xA9	; 169
  e4:	93 e0       	ldi	r25, 0x03	; 3
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <__stack+0x47>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <__stack+0x51>
  f0:	00 00       	nop
  f2:	e2 cf       	rjmp	.-60     	; 0xb8 <__stack+0x19>

000000f4 <__utoa_ncheck>:
  f4:	bb 27       	eor	r27, r27

000000f6 <__utoa_common>:
  f6:	fb 01       	movw	r30, r22
  f8:	55 27       	eor	r21, r21
  fa:	aa 27       	eor	r26, r26
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	aa 1f       	adc	r26, r26
 102:	a4 17       	cp	r26, r20
 104:	10 f0       	brcs	.+4      	; 0x10a <__utoa_common+0x14>
 106:	a4 1b       	sub	r26, r20
 108:	83 95       	inc	r24
 10a:	50 51       	subi	r21, 0x10	; 16
 10c:	b9 f7       	brne	.-18     	; 0xfc <__utoa_common+0x6>
 10e:	a0 5d       	subi	r26, 0xD0	; 208
 110:	aa 33       	cpi	r26, 0x3A	; 58
 112:	08 f0       	brcs	.+2      	; 0x116 <__utoa_common+0x20>
 114:	a9 5d       	subi	r26, 0xD9	; 217
 116:	a1 93       	st	Z+, r26
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	79 f7       	brne	.-34     	; 0xfa <__utoa_common+0x4>
 11c:	b1 11       	cpse	r27, r1
 11e:	b1 93       	st	Z+, r27
 120:	11 92       	st	Z+, r1
 122:	cb 01       	movw	r24, r22
 124:	00 c0       	rjmp	.+0      	; 0x126 <strrev>

00000126 <strrev>:
 126:	dc 01       	movw	r26, r24
 128:	fc 01       	movw	r30, r24
 12a:	67 2f       	mov	r22, r23
 12c:	71 91       	ld	r23, Z+
 12e:	77 23       	and	r23, r23
 130:	e1 f7       	brne	.-8      	; 0x12a <strrev+0x4>
 132:	32 97       	sbiw	r30, 0x02	; 2
 134:	04 c0       	rjmp	.+8      	; 0x13e <strrev+0x18>
 136:	7c 91       	ld	r23, X
 138:	6d 93       	st	X+, r22
 13a:	70 83       	st	Z, r23
 13c:	62 91       	ld	r22, -Z
 13e:	ae 17       	cp	r26, r30
 140:	bf 07       	cpc	r27, r31
 142:	c8 f3       	brcs	.-14     	; 0x136 <strrev+0x10>
 144:	08 95       	ret

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
