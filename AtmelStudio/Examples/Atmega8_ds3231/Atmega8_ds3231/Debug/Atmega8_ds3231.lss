
Atmega8_ds3231.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000035a  000003ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080006c  0080006c  000003fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d4  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000819  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000947  00000000  00000000  00001f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  000028a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  00002b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000812  00000000  00000000  00002f12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003724  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	65 c1       	rjmp	.+714    	; 0x2ce <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	61 c0       	rjmp	.+194    	; 0xca <__vector_3>
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e5       	ldi	r30, 0x5A	; 90
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 37       	cpi	r26, 0x76	; 118
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	6c d1       	rcall	.+728    	; 0x332 <main>
  5a:	7d c1       	rjmp	.+762    	; 0x356 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <display_bright>:
uint8_t digit[10]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6f};// символы с 0 по 9
uint8_t buff[4];// буфер
uint8_t bright[4];// массив €ркости разр€дов

void display_bright(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3){
	bright[3]=b3;
  5e:	e1 e7       	ldi	r30, 0x71	; 113
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	23 83       	std	Z+3, r18	; 0x03
	bright[2]=b2;
  64:	42 83       	std	Z+2, r20	; 0x02
	bright[1]=b1;
  66:	61 83       	std	Z+1, r22	; 0x01
	bright[0]=b0;
  68:	80 83       	st	Z, r24
  6a:	08 95       	ret

0000006c <display>:
}

void display(uint8_t n3, uint8_t n2, uint8_t n1, uint8_t n0)
{
	buff[3]=digit[n3];
  6c:	ad e6       	ldi	r26, 0x6D	; 109
  6e:	b0 e0       	ldi	r27, 0x00	; 0
  70:	e8 2f       	mov	r30, r24
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	e0 5a       	subi	r30, 0xA0	; 160
  76:	ff 4f       	sbci	r31, 0xFF	; 255
  78:	80 81       	ld	r24, Z
  7a:	13 96       	adiw	r26, 0x03	; 3
  7c:	8c 93       	st	X, r24
  7e:	13 97       	sbiw	r26, 0x03	; 3
	buff[2]=digit[n2];
  80:	e6 2f       	mov	r30, r22
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	e0 5a       	subi	r30, 0xA0	; 160
  86:	ff 4f       	sbci	r31, 0xFF	; 255
  88:	80 81       	ld	r24, Z
  8a:	12 96       	adiw	r26, 0x02	; 2
  8c:	8c 93       	st	X, r24
  8e:	12 97       	sbiw	r26, 0x02	; 2
	buff[1]=digit[n1];
  90:	e4 2f       	mov	r30, r20
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	e0 5a       	subi	r30, 0xA0	; 160
  96:	ff 4f       	sbci	r31, 0xFF	; 255
  98:	80 81       	ld	r24, Z
  9a:	11 96       	adiw	r26, 0x01	; 1
  9c:	8c 93       	st	X, r24
  9e:	11 97       	sbiw	r26, 0x01	; 1
	buff[0]=digit[n0];
  a0:	e2 2f       	mov	r30, r18
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	e0 5a       	subi	r30, 0xA0	; 160
  a6:	ff 4f       	sbci	r31, 0xFF	; 255
  a8:	80 81       	ld	r24, Z
  aa:	8c 93       	st	X, r24
  ac:	08 95       	ret

000000ae <display_ini>:
}

// инициализаци€ индикации
void display_ini(void){
	DDRB=255;// пины сегментов на выход
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 bb       	out	0x17, r24	; 23
	DDRC|=(1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);// пины разр€дов на выход
  b2:	84 b3       	in	r24, 0x14	; 20
  b4:	8f 60       	ori	r24, 0x0F	; 15
  b6:	84 bb       	out	0x14, r24	; 20
	
	TCCR2|=(1<<CS22);// запуск таймера 2 с делителем 64
  b8:	85 b5       	in	r24, 0x25	; 37
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	85 bd       	out	0x25, r24	; 37
	TIMSK|=(1<<TOIE2) | (1<<OCIE2);// разрешить прерывание по переполнению и совпадению
  be:	89 b7       	in	r24, 0x39	; 57
  c0:	80 6c       	ori	r24, 0xC0	; 192
  c2:	89 bf       	out	0x39, r24	; 57
	OCR2=100;
  c4:	84 e6       	ldi	r24, 0x64	; 100
  c6:	83 bd       	out	0x23, r24	; 35
  c8:	08 95       	ret

000000ca <__vector_3>:
}


ISR(TIMER2_COMP_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
	PORTC&=0xF0;// выключить все разр€ды
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	85 bb       	out	0x15, r24	; 21
}
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <__vector_4>:

//обработчик прерывани€ по переполнению таймера 2
ISR(TIMER2_OVF_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
	uint8_t static status;
	
	switch (status)
  f4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	89 f0       	breq	.+34     	; 0x11e <__vector_4+0x36>
  fc:	28 f0       	brcs	.+10     	; 0x108 <__vector_4+0x20>
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	c9 f0       	breq	.+50     	; 0x134 <__vector_4+0x4c>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	11 f1       	breq	.+68     	; 0x14a <__vector_4+0x62>
 106:	2a c0       	rjmp	.+84     	; 0x15c <__vector_4+0x74>
	{
		case 0:// разр€д 0
		PORTB=buff[0];
 108:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <buff>
 10c:	88 bb       	out	0x18, r24	; 24
		PORTC|=(1<<PC3);
 10e:	ab 9a       	sbi	0x15, 3	; 21
		OCR2=bright[0];
 110:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <bright>
 114:	83 bd       	out	0x23, r24	; 35
		status=1;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		break;
 11c:	1f c0       	rjmp	.+62     	; 0x15c <__vector_4+0x74>
		
		case 1:// разр€д 1
		PORTB=buff[1];
 11e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <buff+0x1>
 122:	88 bb       	out	0x18, r24	; 24
		PORTC|=(1<<PC2);
 124:	aa 9a       	sbi	0x15, 2	; 21
		OCR2=bright[1];
 126:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <bright+0x1>
 12a:	83 bd       	out	0x23, r24	; 35
		status=2;
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		break;
 132:	14 c0       	rjmp	.+40     	; 0x15c <__vector_4+0x74>
		
		case 2:// разр€д 2
		PORTB=buff[2];
 134:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <buff+0x2>
 138:	88 bb       	out	0x18, r24	; 24
		PORTC|=(1<<PC1);
 13a:	a9 9a       	sbi	0x15, 1	; 21
		OCR2=bright[2];
 13c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <bright+0x2>
 140:	83 bd       	out	0x23, r24	; 35
		status=3;
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		break;
 148:	09 c0       	rjmp	.+18     	; 0x15c <__vector_4+0x74>
		
		case 3:// разр€д 3
		PORTB=buff[3];
 14a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <buff+0x3>
 14e:	88 bb       	out	0x18, r24	; 24
		PORTC|=(1<<PC0);
 150:	a8 9a       	sbi	0x15, 0	; 21
		OCR2=bright[3];
 152:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <bright+0x3>
 156:	83 bd       	out	0x23, r24	; 35
		status=0;
 158:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
		break;
	}
	
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <ds_ini>:
	
	// конвертим мз воично ес€тичного в дес€тичный
	*ss=(s>>4)*10+(s&0x0F);
	*mm=(m>>4)*10+(m&0x0F);
	*hh=(h>>4)*10+(h&0x0F);
}
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	85 b7       	in	r24, 0x35	; 53
 16e:	83 60       	ori	r24, 0x03	; 3
 170:	85 bf       	out	0x35, r24	; 53
 172:	8b b7       	in	r24, 0x3b	; 59
 174:	80 64       	ori	r24, 0x40	; 64
 176:	8b bf       	out	0x3b, r24	; 59
 178:	c6 d0       	rcall	.+396    	; 0x306 <i2c_start>
 17a:	80 ed       	ldi	r24, 0xD0	; 208
 17c:	cb d0       	rcall	.+406    	; 0x314 <i2c_write>
 17e:	8e e0       	ldi	r24, 0x0E	; 14
 180:	c9 d0       	rcall	.+402    	; 0x314 <i2c_write>
 182:	c5 d0       	rcall	.+394    	; 0x30e <i2c_stop>
 184:	c0 d0       	rcall	.+384    	; 0x306 <i2c_start>
 186:	81 ed       	ldi	r24, 0xD1	; 209
 188:	c5 d0       	rcall	.+394    	; 0x314 <i2c_write>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	c8 d0       	rcall	.+400    	; 0x31e <i2c_read>
 18e:	c8 2f       	mov	r28, r24
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	c5 d0       	rcall	.+394    	; 0x31e <i2c_read>
 194:	d8 2f       	mov	r29, r24
 196:	bb d0       	rcall	.+374    	; 0x30e <i2c_stop>
 198:	c1 11       	cpse	r28, r1
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <ds_ini+0x38>
 19c:	dd 23       	and	r29, r29
 19e:	51 f0       	breq	.+20     	; 0x1b4 <ds_ini+0x4c>
 1a0:	b2 d0       	rcall	.+356    	; 0x306 <i2c_start>
 1a2:	80 ed       	ldi	r24, 0xD0	; 208
 1a4:	b7 d0       	rcall	.+366    	; 0x314 <i2c_write>
 1a6:	8e e0       	ldi	r24, 0x0E	; 14
 1a8:	b5 d0       	rcall	.+362    	; 0x314 <i2c_write>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	b3 d0       	rcall	.+358    	; 0x314 <i2c_write>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	b1 d0       	rcall	.+354    	; 0x314 <i2c_write>
 1b2:	ad d0       	rcall	.+346    	; 0x30e <i2c_stop>
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <ds_temp>:
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <tiki>
 1c2:	2f 33       	cpi	r18, 0x3F	; 63
 1c4:	80 f0       	brcs	.+32     	; 0x1e6 <ds_temp+0x2c>
 1c6:	ec 01       	movw	r28, r24
 1c8:	9e d0       	rcall	.+316    	; 0x306 <i2c_start>
 1ca:	80 ed       	ldi	r24, 0xD0	; 208
 1cc:	a3 d0       	rcall	.+326    	; 0x314 <i2c_write>
 1ce:	81 e1       	ldi	r24, 0x11	; 17
 1d0:	a1 d0       	rcall	.+322    	; 0x314 <i2c_write>
 1d2:	9d d0       	rcall	.+314    	; 0x30e <i2c_stop>
 1d4:	98 d0       	rcall	.+304    	; 0x306 <i2c_start>
 1d6:	81 ed       	ldi	r24, 0xD1	; 209
 1d8:	9d d0       	rcall	.+314    	; 0x314 <i2c_write>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	a0 d0       	rcall	.+320    	; 0x31e <i2c_read>
 1de:	88 83       	st	Y, r24
 1e0:	96 d0       	rcall	.+300    	; 0x30e <i2c_stop>
 1e2:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <tiki>
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <ds_settime>:
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	d8 2f       	mov	r29, r24
 1f6:	16 2f       	mov	r17, r22
 1f8:	04 2f       	mov	r16, r20
 1fa:	85 d0       	rcall	.+266    	; 0x306 <i2c_start>
 1fc:	80 ed       	ldi	r24, 0xD0	; 208
 1fe:	8a d0       	rcall	.+276    	; 0x314 <i2c_write>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	88 d0       	rcall	.+272    	; 0x314 <i2c_write>
 204:	cd ec       	ldi	r28, 0xCD	; 205
 206:	0c 9f       	mul	r16, r28
 208:	91 2d       	mov	r25, r1
 20a:	11 24       	eor	r1, r1
 20c:	96 95       	lsr	r25
 20e:	96 95       	lsr	r25
 210:	96 95       	lsr	r25
 212:	20 e1       	ldi	r18, 0x10	; 16
 214:	92 9f       	mul	r25, r18
 216:	a0 01       	movw	r20, r0
 218:	11 24       	eor	r1, r1
 21a:	99 0f       	add	r25, r25
 21c:	29 2f       	mov	r18, r25
 21e:	22 0f       	add	r18, r18
 220:	22 0f       	add	r18, r18
 222:	92 0f       	add	r25, r18
 224:	80 2f       	mov	r24, r16
 226:	89 1b       	sub	r24, r25
 228:	84 2b       	or	r24, r20
 22a:	74 d0       	rcall	.+232    	; 0x314 <i2c_write>
 22c:	1c 9f       	mul	r17, r28
 22e:	91 2d       	mov	r25, r1
 230:	11 24       	eor	r1, r1
 232:	96 95       	lsr	r25
 234:	96 95       	lsr	r25
 236:	96 95       	lsr	r25
 238:	80 e1       	ldi	r24, 0x10	; 16
 23a:	98 9f       	mul	r25, r24
 23c:	a0 01       	movw	r20, r0
 23e:	11 24       	eor	r1, r1
 240:	99 0f       	add	r25, r25
 242:	29 2f       	mov	r18, r25
 244:	22 0f       	add	r18, r18
 246:	22 0f       	add	r18, r18
 248:	92 0f       	add	r25, r18
 24a:	81 2f       	mov	r24, r17
 24c:	89 1b       	sub	r24, r25
 24e:	84 2b       	or	r24, r20
 250:	61 d0       	rcall	.+194    	; 0x314 <i2c_write>
 252:	dc 9f       	mul	r29, r28
 254:	c1 2d       	mov	r28, r1
 256:	11 24       	eor	r1, r1
 258:	c6 95       	lsr	r28
 25a:	c6 95       	lsr	r28
 25c:	c6 95       	lsr	r28
 25e:	20 e1       	ldi	r18, 0x10	; 16
 260:	c2 9f       	mul	r28, r18
 262:	c0 01       	movw	r24, r0
 264:	11 24       	eor	r1, r1
 266:	cc 0f       	add	r28, r28
 268:	9c 2f       	mov	r25, r28
 26a:	99 0f       	add	r25, r25
 26c:	99 0f       	add	r25, r25
 26e:	c9 0f       	add	r28, r25
 270:	dc 1b       	sub	r29, r28
 272:	8d 2b       	or	r24, r29
 274:	4f d0       	rcall	.+158    	; 0x314 <i2c_write>
 276:	4b d0       	rcall	.+150    	; 0x30e <i2c_stop>
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

00000282 <ds_showtime>:


void ds_showtime(void){
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
	if (update)
 286:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <update>
 28a:	88 23       	and	r24, r24
 28c:	e9 f0       	breq	.+58     	; 0x2c8 <ds_showtime+0x46>
	{
		uint8_t m,s;
		i2c_start();// старт
 28e:	3b d0       	rcall	.+118    	; 0x306 <i2c_start>
		i2c_write(DS_WRITE);//адрес на запись
 290:	80 ed       	ldi	r24, 0xD0	; 208
 292:	40 d0       	rcall	.+128    	; 0x314 <i2c_write>
		i2c_write(0);//номер регистра
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	3e d0       	rcall	.+124    	; 0x314 <i2c_write>
		i2c_stop();//стоп
 298:	3a d0       	rcall	.+116    	; 0x30e <i2c_stop>
		
		i2c_start();//старт
 29a:	35 d0       	rcall	.+106    	; 0x306 <i2c_start>
		i2c_write(DS_READ);//адрес на чтение
 29c:	81 ed       	ldi	r24, 0xD1	; 209
 29e:	3a d0       	rcall	.+116    	; 0x314 <i2c_write>
		s=i2c_read(1);//читаем байт с ответом
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	3d d0       	rcall	.+122    	; 0x31e <i2c_read>
 2a4:	c8 2f       	mov	r28, r24
		m=i2c_read(0);// без ответа т.к. последний байт
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	3a d0       	rcall	.+116    	; 0x31e <i2c_read>
 2aa:	d8 2f       	mov	r29, r24
		i2c_stop();//стоп
 2ac:	30 d0       	rcall	.+96     	; 0x30e <i2c_stop>
		
		display(m>>4, m&0x0F, s>>4, s&0x0F);
 2ae:	2c 2f       	mov	r18, r28
 2b0:	2f 70       	andi	r18, 0x0F	; 15
 2b2:	4c 2f       	mov	r20, r28
 2b4:	42 95       	swap	r20
 2b6:	4f 70       	andi	r20, 0x0F	; 15
 2b8:	6d 2f       	mov	r22, r29
 2ba:	6f 70       	andi	r22, 0x0F	; 15
 2bc:	8d 2f       	mov	r24, r29
 2be:	82 95       	swap	r24
 2c0:	8f 70       	andi	r24, 0x0F	; 15
 2c2:	d4 de       	rcall	.-600    	; 0x6c <display>
		update=0;
 2c4:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <update>
	}
		
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <__vector_1>:

// прерывание инт0
ISR(INT0_vect){
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	8f 93       	push	r24
	update=1;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <update>
	tiki++;
 2e0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tiki>
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tiki>
 2ea:	8f 91       	pop	r24
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <i2c_ini>:
#include "i2c.h"

// натройка интерфейса на тактирование 100  гц
void i2c_ini(void){
	TWSR=0;
 2f6:	11 b8       	out	0x01, r1	; 1
	TWBR=32;
 2f8:	80 e2       	ldi	r24, 0x20	; 32
 2fa:	80 b9       	out	0x00, r24	; 0
 2fc:	08 95       	ret

000002fe <i2c_wait>:
}

//ожидание завершени€ задани€
void i2c_wait(void){
	while (!(TWCR & (1<<TWINT)));
 2fe:	06 b6       	in	r0, 0x36	; 54
 300:	07 fe       	sbrs	r0, 7
 302:	fd cf       	rjmp	.-6      	; 0x2fe <i2c_wait>
}
 304:	08 95       	ret

00000306 <i2c_start>:

// условие старт
void i2c_start(void) {
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 306:	84 ea       	ldi	r24, 0xA4	; 164
 308:	86 bf       	out	0x36, r24	; 54
	i2c_wait();
 30a:	f9 df       	rcall	.-14     	; 0x2fe <i2c_wait>
 30c:	08 95       	ret

0000030e <i2c_stop>:
}

// условие стоп
void i2c_stop(void) {
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 30e:	84 e9       	ldi	r24, 0x94	; 148
 310:	86 bf       	out	0x36, r24	; 54
 312:	08 95       	ret

00000314 <i2c_write>:
}

// запись байта
void i2c_write(uint8_t byte) {
	TWDR = byte;
 314:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 316:	84 e8       	ldi	r24, 0x84	; 132
 318:	86 bf       	out	0x36, r24	; 54
	i2c_wait();
 31a:	f1 df       	rcall	.-30     	; 0x2fe <i2c_wait>
 31c:	08 95       	ret

0000031e <i2c_read>:
}

// чтение байта, ack!=0 с ответом, ack=0 без ответа.
uint8_t i2c_read(uint8_t ack){
	if (ack) TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 31e:	88 23       	and	r24, r24
 320:	19 f0       	breq	.+6      	; 0x328 <i2c_read+0xa>
 322:	84 ec       	ldi	r24, 0xC4	; 196
 324:	86 bf       	out	0x36, r24	; 54
 326:	02 c0       	rjmp	.+4      	; 0x32c <i2c_read+0xe>
	else TWCR = (1<<TWINT)|(1<<TWEN);
 328:	84 e8       	ldi	r24, 0x84	; 132
 32a:	86 bf       	out	0x36, r24	; 54
	i2c_wait();
 32c:	e8 df       	rcall	.-48     	; 0x2fe <i2c_wait>
	return TWDR;
 32e:	83 b1       	in	r24, 0x03	; 3
 330:	08 95       	ret

00000332 <main>:

int8_t temp=99;

int main(void)
{
	sei();
 332:	78 94       	sei
	i2c_ini();// инициализаци€ i2c
 334:	e0 df       	rcall	.-64     	; 0x2f6 <i2c_ini>
	ds_ini(); // инициализаци€ дс1307
 336:	18 df       	rcall	.-464    	; 0x168 <ds_ini>
	
	display_ini();
 338:	ba de       	rcall	.-652    	; 0xae <display_ini>
	display_bright(255,255,255,255);
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	4f ef       	ldi	r20, 0xFF	; 255
 33e:	6f ef       	ldi	r22, 0xFF	; 255
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	8d de       	rcall	.-742    	; 0x5e <display_bright>
	
	
	ds_settime(11,11,11);
 344:	4b e0       	ldi	r20, 0x0B	; 11
 346:	6b e0       	ldi	r22, 0x0B	; 11
 348:	8b e0       	ldi	r24, 0x0B	; 11
 34a:	50 df       	rcall	.-352    	; 0x1ec <ds_settime>
	
    while (1) 
    {
		ds_showtime();
 34c:	9a df       	rcall	.-204    	; 0x282 <ds_showtime>
		ds_temp(&temp);
 34e:	8b e6       	ldi	r24, 0x6B	; 107
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	33 df       	rcall	.-410    	; 0x1ba <ds_temp>
 354:	fb cf       	rjmp	.-10     	; 0x34c <main+0x1a>

00000356 <_exit>:
 356:	f8 94       	cli

00000358 <__stop_program>:
 358:	ff cf       	rjmp	.-2      	; 0x358 <__stop_program>
