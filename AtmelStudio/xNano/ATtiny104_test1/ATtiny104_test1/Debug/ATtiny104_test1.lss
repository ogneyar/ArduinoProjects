
ATtiny104_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  00800040  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000511  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000478  00000000  00000000  0000074d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000213  00000000  00000000  00000bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000305  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c8  00000000  00000000  00001121  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000011e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0f c0       	rjmp	.+30     	; 0x20 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>
  14:	0d c0       	rjmp	.+26     	; 0x30 <__bad_interrupt>
  16:	0c c0       	rjmp	.+24     	; 0x30 <__bad_interrupt>
  18:	0b c0       	rjmp	.+22     	; 0x30 <__bad_interrupt>
  1a:	0a c0       	rjmp	.+20     	; 0x30 <__bad_interrupt>
  1c:	09 c0       	rjmp	.+18     	; 0x30 <__bad_interrupt>
  1e:	08 c0       	rjmp	.+16     	; 0x30 <__bad_interrupt>

00000020 <__ctors_end>:
  20:	11 27       	eor	r17, r17
  22:	1f bf       	out	0x3f, r17	; 63
  24:	cf e5       	ldi	r28, 0x5F	; 95
  26:	d0 e0       	ldi	r29, 0x00	; 0
  28:	de bf       	out	0x3e, r29	; 62
  2a:	cd bf       	out	0x3d, r28	; 61
  2c:	62 d0       	rcall	.+196    	; 0xf2 <main>
  2e:	8f c0       	rjmp	.+286    	; 0x14e <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <delay>:
		
		if (flag > 10) flag = 0;
    }
}

void delay(uint32_t  interval) {
  32:	cf 93       	push	r28
  34:	df 93       	push	r29
  36:	cd b7       	in	r28, 0x3d	; 61
  38:	de b7       	in	r29, 0x3e	; 62
  3a:	c8 50       	subi	r28, 0x08	; 8
  3c:	d1 0b       	sbc	r29, r17
  3e:	0f b7       	in	r16, 0x3f	; 63
  40:	f8 94       	cli
  42:	de bf       	out	0x3e, r29	; 62
  44:	0f bf       	out	0x3f, r16	; 63
  46:	cd bf       	out	0x3d, r28	; 61
  48:	cb 5f       	subi	r28, 0xFB	; 251
  4a:	df 4f       	sbci	r29, 0xFF	; 255
  4c:	69 93       	st	Y+, r22
  4e:	79 93       	st	Y+, r23
  50:	89 93       	st	Y+, r24
  52:	98 83       	st	Y, r25
  54:	c8 50       	subi	r28, 0x08	; 8
  56:	d0 40       	sbci	r29, 0x00	; 0
	for (uint32_t i=0; i < (interval<<4); i++) asm("nop"); // <<4 - вместо * на 16
  58:	cf 5f       	subi	r28, 0xFF	; 255
  5a:	df 4f       	sbci	r29, 0xFF	; 255
  5c:	19 93       	st	Y+, r17
  5e:	19 93       	st	Y+, r17
  60:	19 93       	st	Y+, r17
  62:	18 83       	st	Y, r17
  64:	c4 50       	subi	r28, 0x04	; 4
  66:	d0 40       	sbci	r29, 0x00	; 0
  68:	15 c0       	rjmp	.+42     	; 0x94 <__stack+0x35>
  6a:	00 00       	nop
  6c:	cf 5f       	subi	r28, 0xFF	; 255
  6e:	df 4f       	sbci	r29, 0xFF	; 255
  70:	49 91       	ld	r20, Y+
  72:	59 91       	ld	r21, Y+
  74:	69 91       	ld	r22, Y+
  76:	78 81       	ld	r23, Y
  78:	c4 50       	subi	r28, 0x04	; 4
  7a:	d0 40       	sbci	r29, 0x00	; 0
  7c:	4f 5f       	subi	r20, 0xFF	; 255
  7e:	5f 4f       	sbci	r21, 0xFF	; 255
  80:	6f 4f       	sbci	r22, 0xFF	; 255
  82:	7f 4f       	sbci	r23, 0xFF	; 255
  84:	cf 5f       	subi	r28, 0xFF	; 255
  86:	df 4f       	sbci	r29, 0xFF	; 255
  88:	49 93       	st	Y+, r20
  8a:	59 93       	st	Y+, r21
  8c:	69 93       	st	Y+, r22
  8e:	78 83       	st	Y, r23
  90:	c4 50       	subi	r28, 0x04	; 4
  92:	d0 40       	sbci	r29, 0x00	; 0
  94:	cb 5f       	subi	r28, 0xFB	; 251
  96:	df 4f       	sbci	r29, 0xFF	; 255
  98:	49 91       	ld	r20, Y+
  9a:	59 91       	ld	r21, Y+
  9c:	69 91       	ld	r22, Y+
  9e:	78 81       	ld	r23, Y
  a0:	c8 50       	subi	r28, 0x08	; 8
  a2:	d0 40       	sbci	r29, 0x00	; 0
  a4:	44 0f       	add	r20, r20
  a6:	55 1f       	adc	r21, r21
  a8:	66 1f       	adc	r22, r22
  aa:	77 1f       	adc	r23, r23
  ac:	44 0f       	add	r20, r20
  ae:	55 1f       	adc	r21, r21
  b0:	66 1f       	adc	r22, r22
  b2:	77 1f       	adc	r23, r23
  b4:	44 0f       	add	r20, r20
  b6:	55 1f       	adc	r21, r21
  b8:	66 1f       	adc	r22, r22
  ba:	77 1f       	adc	r23, r23
  bc:	44 0f       	add	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	66 1f       	adc	r22, r22
  c2:	77 1f       	adc	r23, r23
  c4:	cf 5f       	subi	r28, 0xFF	; 255
  c6:	df 4f       	sbci	r29, 0xFF	; 255
  c8:	89 91       	ld	r24, Y+
  ca:	99 91       	ld	r25, Y+
  cc:	a9 91       	ld	r26, Y+
  ce:	b8 81       	ld	r27, Y
  d0:	c4 50       	subi	r28, 0x04	; 4
  d2:	d0 40       	sbci	r29, 0x00	; 0
  d4:	84 17       	cp	r24, r20
  d6:	95 07       	cpc	r25, r21
  d8:	a6 07       	cpc	r26, r22
  da:	b7 07       	cpc	r27, r23
  dc:	30 f2       	brcs	.-116    	; 0x6a <__stack+0xb>
}
  de:	c8 5f       	subi	r28, 0xF8	; 248
  e0:	df 4f       	sbci	r29, 0xFF	; 255
  e2:	0f b7       	in	r16, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	0f bf       	out	0x3f, r16	; 63
  ea:	cd bf       	out	0x3d, r28	; 61
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <main>:
void delay(uint32_t  interval);


int main(void)
{
    DDRA |= LED; // на выход
  f2:	41 b1       	in	r20, 0x01	; 1
  f4:	40 62       	ori	r20, 0x20	; 32
  f6:	41 b9       	out	0x01, r20	; 1
	//DDRA &= ~LED; // на вход (по умолчанию)
    DDRB |= BTN_USR; // на выход
  f8:	45 b1       	in	r20, 0x05	; 5
  fa:	42 60       	ori	r20, 0x02	; 2
  fc:	45 b9       	out	0x05, r20	; 5
	//DDRB &= ~BTN_USR; // на вход (по умолчанию)
		
	PORT_BTN |= BTN_USR; // pull up -  подтяжка к плюсу питания
  fe:	46 b1       	in	r20, 0x06	; 6
 100:	42 60       	ori	r20, 0x02	; 2
 102:	46 b9       	out	0x06, r20	; 6
	//PORT_BTN &= ~BTN_USR; // pull down -  подтяжка к минусу питания
	PORT_LED |= LED; // pull up - (светодиод гаснет)
 104:	42 b1       	in	r20, 0x02	; 2
 106:	40 62       	ori	r20, 0x20	; 32
 108:	42 b9       	out	0x02, r20	; 2
	//PORT_LED &= ~LED; // pull down - (светодиод горит)
		
	uint32_t  interval = 1000; // примерно секунда
	
	int8_t flag = 0;
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	01 c0       	rjmp	.+2      	; 0x110 <main+0x1e>
		delay(interval);
		PORT_LED ^= LED;
		
		flag++;
		
		if (flag > 10) flag = 0;
 10e:	c0 e0       	ldi	r28, 0x00	; 0
	
	int8_t flag = 0;
	
    while (1) 
    {
		if (!(PINB & BTN_USR)) //  если кнопка нажата
 110:	21 9b       	sbis	0x04, 1	; 4
 112:	07 c0       	rjmp	.+14     	; 0x122 <main+0x30>
			interval = 50;
		else if (flag < 4)
 114:	c4 30       	cpi	r28, 0x04	; 4
 116:	54 f4       	brge	.+20     	; 0x12c <main+0x3a>
			interval = 500;
 118:	44 ef       	ldi	r20, 0xF4	; 244
 11a:	51 e0       	ldi	r21, 0x01	; 1
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	09 c0       	rjmp	.+18     	; 0x134 <main+0x42>
	int8_t flag = 0;
	
    while (1) 
    {
		if (!(PINB & BTN_USR)) //  если кнопка нажата
			interval = 50;
 122:	42 e3       	ldi	r20, 0x32	; 50
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	04 c0       	rjmp	.+8      	; 0x134 <main+0x42>
		else if (flag < 4)
			interval = 500;
		else 
			interval = 100;
 12c:	44 e6       	ldi	r20, 0x64	; 100
 12e:	50 e0       	ldi	r21, 0x00	; 0
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	70 e0       	ldi	r23, 0x00	; 0
		
		delay(interval);
 134:	97 2f       	mov	r25, r23
 136:	86 2f       	mov	r24, r22
 138:	75 2f       	mov	r23, r21
 13a:	64 2f       	mov	r22, r20
 13c:	7a df       	rcall	.-268    	; 0x32 <delay>
		PORT_LED ^= LED;
 13e:	52 b1       	in	r21, 0x02	; 2
 140:	40 e2       	ldi	r20, 0x20	; 32
 142:	45 27       	eor	r20, r21
 144:	42 b9       	out	0x02, r20	; 2
		
		flag++;
 146:	cf 5f       	subi	r28, 0xFF	; 255
		
		if (flag > 10) flag = 0;
 148:	cb 30       	cpi	r28, 0x0B	; 11
 14a:	0c f7       	brge	.-62     	; 0x10e <main+0x1c>
 14c:	e1 cf       	rjmp	.-62     	; 0x110 <main+0x1e>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
