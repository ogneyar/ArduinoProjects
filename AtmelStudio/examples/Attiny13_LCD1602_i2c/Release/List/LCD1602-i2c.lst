
AVRASM ver. 2.1.30  C:\Users\shpala\Dropbox\ст\cvavr\Release\List\LCD1602-i2c.asm Sun Dec 04 16:13:59 2016

C:\Users\shpala\Dropbox\ст\cvavr\Release\List\LCD1602-i2c.asm(1011): warning: Register r4 already defined by the .DEF directive
C:\Users\shpala\Dropbox\ст\cvavr\Release\List\LCD1602-i2c.asm(1012): warning: Register r5 already defined by the .DEF directive
C:\Users\shpala\Dropbox\ст\cvavr\Release\List\LCD1602-i2c.asm(1013): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATtiny13A
                 ;Program type           : Application
                 ;Clock frequency        : 1,200000 MHz
                 ;Memory model           : Tiny
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 32 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_TINY_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny13A
                 	#pragma AVRPART MEMORY PROG_FLASH 1024
                 	#pragma AVRPART MEMORY EEPROM 64
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 64
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 
                 	.EQU WDTCR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x009F
                 	.EQU __DSTACK_SIZE=0x0020
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOV  R30,R0
                 	MOV  R31,R1
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOV  R30,R0
                 	MOV  R31,R1
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOV  R26,R0
                 	MOV  R27,R1
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R5
                 	.DEF __lcd_maxx=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c023      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
                 
                 _0x3:
00000a c080      	.DB  0x80,0xC0
                 _0xA:
C:\Users\shpala\Dropbox\ст\cvavr\Release\List\LCD1602-i2c.asm(1036): warning: .cseg .db misalignment - padding zero byte
00000b 0008      	.DB  0x8
                 _0x0:
00000c 6548
00000d 6c6c
00000e 206f
00000f 7264      	.DB  0x48,0x65,0x6C,0x6C,0x6F,0x20,0x64,0x72
000010 7669
000011 3265
000012 722e
000013 2175      	.DB  0x69,0x76,0x65,0x32,0x2E,0x72,0x75,0x21
000014 7400
000015 7365
000016 2074
000017 434c      	.DB  0x0,0x74,0x65,0x73,0x74,0x20,0x4C,0x43
000018 3144
000019 3036
00001a 2032
00001b 3269      	.DB  0x44,0x31,0x36,0x30,0x32,0x20,0x69,0x32
00001c 0063      	.DB  0x63,0x0
                 
                 __GLOBAL_INI_TBL:
00001d 0002      	.DW  0x02
00001e 0080      	.DW  __base_y_G000
00001f 0014      	.DW  _0x3*2
                 
000020 0001      	.DW  0x01
000021 0084      	.DW  _backlight_S0000001000
000022 0016      	.DW  _0xA*2
                 
                 _0xFFFFFFFF:
000023 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000024 94f8      	CLI
000025 27ee      	CLR  R30
000026 bbec      	OUT  EECR,R30
000027 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000028 e08d      	LDI  R24,(14-2)+1
000029 e0a2      	LDI  R26,2
                 __CLEAR_REG:
00002a 93ed      	ST   X+,R30
00002b 958a      	DEC  R24
00002c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002d e480      	LDI  R24,__CLEAR_SRAM_SIZE
00002e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00002f 93ed      	ST   X+,R30
000030 958a      	DEC  R24
000031 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000032 e3ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000033 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000034 95c8      	LPM
000035 9631      	ADIW R30,1
000036 2d80      	MOV  R24,R0
000037 95c8      	LPM
000038 9631      	ADIW R30,1
000039 2d90      	MOV  R25,R0
00003a 9700      	SBIW R24,0
00003b f0b9      	BREQ __GLOBAL_INI_END
00003c 95c8      	LPM
00003d 9631      	ADIW R30,1
00003e 2da0      	MOV  R26,R0
00003f 95c8      	LPM
000040 9631      	ADIW R30,1
000041 2db0      	MOV  R27,R0
000042 95c8      	LPM
000043 9631      	ADIW R30,1
000044 2c10      	MOV  R1,R0
000045 95c8      	LPM
000046 9631      	ADIW R30,1
000047 2f6e      	MOV  R22,R30
000048 2f7f      	MOV  R23,R31
000049 2df0      	MOV  R31,R0
00004a 2de1      	MOV  R30,R1
                 __GLOBAL_INI_LOOP:
00004b 95c8      	LPM
00004c 9631      	ADIW R30,1
00004d 920d      	ST   X+,R0
00004e 9701      	SBIW R24,1
00004f f7d9      	BRNE __GLOBAL_INI_LOOP
000050 2fe6      	MOV  R30,R22
000051 2ff7      	MOV  R31,R23
000052 cfe1      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000053 e9ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000054 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000055 e8c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
000056 c0cb      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x80
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;╘ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 03.12.2016
                 ;Author  : shpala
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATtiny13A
                 ;AVR Core Clock frequency: 1,200000 MHz
                 ;Memory model            : Tiny
                 ;External RAM size       : 0
                 ;Data Stack size         : 16
                 ;*******************************************************/
                 ;
                 ;#define PCF8574A            0x3F
                 ;
                 ;#include <tiny13a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x18
                 	.EQU __sm_adc_noise_red=0x08
                 	.EQU __sm_powerdown=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <i2c.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;static unsigned char _base_y[4]={0x80,0xc0};
                 
                 	.DSEG
                 ;unsigned char _lcd_x,_lcd_y,_lcd_maxx;
                 ;
                 ;uint8_t I2C_WRITESEQ(uint8_t slave, uint8_t *seq, uint8_t n)
                 ; 0000 0024 {
                 
                 	.CSEG
                 _I2C_WRITESEQ:
                 ; .FSTART _I2C_WRITESEQ
                 ; 0000 0025     uint8_t ret = 1;
                 ; 0000 0026     if (i2c_start() && i2c_write(slave << 1)) {
000057 93aa      	ST   -Y,R26
000058 930a      	ST   -Y,R16
                 ;	slave -> Y+3
                 ;	*seq -> Y+2
                 ;	n -> Y+1
                 ;	ret -> R16
000059 e001      	LDI  R16,1
00005a d0e5      	RCALL _i2c_start
00005b 30e0      	CPI  R30,0
00005c f031      	BREQ _0x5
00005d 81eb      	LDD  R30,Y+3
00005e 0fee      	LSL  R30
00005f 2fae      	MOV  R26,R30
000060 d113      	RCALL _i2c_write
000061 30e0      	CPI  R30,0
000062 f409      	BRNE _0x6
                 _0x5:
000063 c012      	RJMP _0x4
                 _0x6:
                 ; 0000 0027         uint8_t i;
                 ; 0000 0028         for (i = 0; i < n; i++)
000064 9721      	SBIW R28,1
                 ;	slave -> Y+4
                 ;	*seq -> Y+3
                 ;	n -> Y+2
                 ;	i -> Y+0
000065 e0e0      	LDI  R30,LOW(0)
000066 83e8      	ST   Y,R30
                 _0x8:
000067 81ea      	LDD  R30,Y+2
000068 81a8      	LD   R26,Y
000069 17ae      	CP   R26,R30
00006a f448      	BRSH _0x9
                 ; 0000 0029             i2c_write(seq[i]);
00006b 81e8      	LD   R30,Y
00006c 81ab      	LDD  R26,Y+3
00006d 0fae      	ADD  R26,R30
00006e 91ac      	LD   R26,X
00006f d104      	RCALL _i2c_write
000070 81e8      	LD   R30,Y
000071 5fef      	SUBI R30,-LOW(1)
000072 83e8      	ST   Y,R30
000073 cff3      	RJMP _0x8
                 _0x9:
                 ; 0000 002A ret = 0;
000074 e000      	LDI  R16,LOW(0)
                 ; 0000 002B     }
000075 9621      	ADIW R28,1
                 ; 0000 002C     i2c_stop();
                 _0x4:
000076 d0d8      	RCALL _i2c_stop
                 ; 0000 002D     return ret;
000077 2fe0      	MOV  R30,R16
000078 8108      	LDD  R16,Y+0
000079 9624      	ADIW R28,4
00007a 9508      	RET
                 ; 0000 002E }
                 ; .FEND
                 ;
                 ;static unsigned char wr_lcd_mode(char c, char mode)
                 ; 0000 0031 {
                 _wr_lcd_mode_G000:
                 ; .FSTART _wr_lcd_mode_G000
                 ; 0000 0032     char ret = 1;
                 ; 0000 0033     char seq[5];
                 ; 0000 0034     static char backlight = 8;
                 
                 	.DSEG
                 
                 	.CSEG
                 ; 0000 0035     if (mode == 8) {
00007b 93aa      	ST   -Y,R26
00007c 9725      	SBIW R28,5
00007d 930a      	ST   -Y,R16
                 ;	c -> Y+7
                 ;	mode -> Y+6
                 ;	ret -> R16
                 ;	seq -> Y+1
00007e e001      	LDI  R16,1
00007f 81ae      	LDD  R26,Y+6
000080 30a8      	CPI  R26,LOW(0x8)
000081 f479      	BRNE _0xB
                 ; 0000 0036         backlight = (c != 0) ? 8 : 0;
000082 81af      	LDD  R26,Y+7
000083 30a0      	CPI  R26,LOW(0x0)
000084 f011      	BREQ _0xC
000085 e0e8      	LDI  R30,LOW(8)
000086 c001      	RJMP _0xD
                 _0xC:
000087 e0e0      	LDI  R30,LOW(0)
                 _0xD:
000088 93e0 0084 	STS  _backlight_S0000001000,R30
                 ; 0000 0037         return I2C_WRITESEQ(PCF8574A, &backlight, 1);
00008a e3ef      	LDI  R30,LOW(63)
00008b 93ea      	ST   -Y,R30
00008c e8e4      	LDI  R30,LOW(_backlight_S0000001000)
00008d 93ea      	ST   -Y,R30
00008e e0a1      	LDI  R26,LOW(1)
00008f dfc7      	RCALL _I2C_WRITESEQ
000090 c065      	RJMP _0x2000002
                 ; 0000 0038     }
                 ; 0000 0039     mode |= backlight;
                 _0xB:
000091 91e0 0084 	LDS  R30,_backlight_S0000001000
000093 81ae      	LDD  R26,Y+6
000094 2bea      	OR   R30,R26
000095 83ee      	STD  Y+6,R30
                 ; 0000 003A     seq[0] = mode;                      // EN=0, RW=0, RS=mode
000096 83e9      	STD  Y+1,R30
                 ; 0000 003B     seq[1] = (c & 0xF0) | mode | 4;     // EN=1, RW=0, RS=mode
000097 81ef      	LDD  R30,Y+7
000098 7fe0      	ANDI R30,LOW(0xF0)
000099 81ae      	LDD  R26,Y+6
00009a 2bea      	OR   R30,R26
00009b 60e4      	ORI  R30,4
00009c 83ea      	STD  Y+2,R30
                 ; 0000 003C     seq[2] = seq[1] & ~4;               // EN=0, RW=0, RS=mode
00009d 7feb      	ANDI R30,0xFB
00009e 83eb      	STD  Y+3,R30
                 ; 0000 003D     seq[3] = (c << 4) | mode | 4;       // EN=1, RW=0, RS=mode
00009f 81ef      	LDD  R30,Y+7
0000a0 95e2      	SWAP R30
0000a1 7fe0      	ANDI R30,0xF0
0000a2 2bea      	OR   R30,R26
0000a3 60e4      	ORI  R30,4
0000a4 83ec      	STD  Y+4,R30
                 ; 0000 003E     seq[4] = seq[3] & ~4;               // EN=0, RW=0, RS=mode
0000a5 7feb      	ANDI R30,0xFB
0000a6 83ed      	STD  Y+5,R30
                 ; 0000 003F     ret = I2C_WRITESEQ(PCF8574A, seq, 5);
0000a7 e3ef      	LDI  R30,LOW(63)
0000a8 93ea      	ST   -Y,R30
0000a9 2fec      	MOV  R30,R28
0000aa 5fee      	SUBI R30,-(2)
0000ab 93ea      	ST   -Y,R30
0000ac e0a5      	LDI  R26,LOW(5)
0000ad dfa9      	RCALL _I2C_WRITESEQ
0000ae 2f0e      	MOV  R16,R30
                 ; 0000 0040     if (!(mode & 1) && c <= 2)
0000af 81ee      	LDD  R30,Y+6
0000b0 70e1      	ANDI R30,LOW(0x1)
0000b1 f419      	BRNE _0x10
0000b2 81af      	LDD  R26,Y+7
0000b3 30a3      	CPI  R26,LOW(0x3)
0000b4 f008      	BRLO _0x11
                 _0x10:
0000b5 c003      	RJMP _0xF
                 _0x11:
                 ; 0000 0041         delay_ms(2);                    // CLS and HOME
0000b6 e0a2      	LDI  R26,LOW(2)
0000b7 e0b0      	LDI  R27,0
0000b8 d0d3      	RCALL _delay_ms
                 ; 0000 0042     return ret;
                 _0xF:
0000b9 2fe0      	MOV  R30,R16
0000ba c03b      	RJMP _0x2000002
                 ; 0000 0043 }
                 ; .FEND
                 ;
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 0046 {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 0047     wr_lcd_mode(0x80 | (_base_y[y] + x), 0);   //.kbv now use +
0000bb 93aa      	ST   -Y,R26
                 ;	x -> Y+1
                 ;	y -> Y+0
0000bc 81e8      	LD   R30,Y
0000bd 58e0      	SUBI R30,-LOW(__base_y_G000)
0000be 81e0      	LD   R30,Z
0000bf 81a9      	LDD  R26,Y+1
0000c0 0fea      	ADD  R30,R26
0000c1 68e0      	ORI  R30,0x80
0000c2 93ea      	ST   -Y,R30
0000c3 e0a0      	LDI  R26,LOW(0)
0000c4 dfb6      	RCALL _wr_lcd_mode_G000
                 ; 0000 0048     _lcd_x=x;
0000c5 8049      	LDD  R4,Y+1
                 ; 0000 0049     _lcd_y=y;
0000c6 8058      	LDD  R5,Y+0
                 ; 0000 004A }
0000c7 c058      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ;void lcd_init(unsigned char lcd_columns)
                 ; 0000 004D {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 004E     char i;
                 ; 0000 004F     // High-Nibble von Byte 8 = Display Control:
                 ; 0000 0050     // 1DCB****  D: Disp on/off; C: Cursor on/off  B: blink on/off
                 ; 0000 0051     char init_sequenz[] = { 0x33, 0x32, 0x28, 0x0C, 0x06, 0x01 };
                 ; 0000 0052     _lcd_maxx = lcd_columns;
0000c8 93aa      	ST   -Y,R26
0000c9 9726      	SBIW R28,6
0000ca e3e3      	LDI  R30,LOW(51)
0000cb 83e8      	ST   Y,R30
0000cc e3e2      	LDI  R30,LOW(50)
0000cd 83e9      	STD  Y+1,R30
0000ce e2e8      	LDI  R30,LOW(40)
0000cf 83ea      	STD  Y+2,R30
0000d0 e0ec      	LDI  R30,LOW(12)
0000d1 83eb      	STD  Y+3,R30
0000d2 e0e6      	LDI  R30,LOW(6)
0000d3 83ec      	STD  Y+4,R30
0000d4 e0e1      	LDI  R30,LOW(1)
0000d5 83ed      	STD  Y+5,R30
0000d6 930a      	ST   -Y,R16
                 ;	lcd_columns -> Y+7
                 ;	i -> R16
                 ;	init_sequenz -> Y+1
0000d7 806f      	LDD  R6,Y+7
                 ; 0000 0053     _base_y[2] = _base_y[0] + _lcd_maxx;
0000d8 2de6      	MOV  R30,R6
0000d9 91a0 0080 	LDS  R26,__base_y_G000
0000db 0fea      	ADD  R30,R26
                +
0000dc 93e0 0082+STS __base_y_G000 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G000,2
                 ; 0000 0054     _base_y[3] = _base_y[1] + _lcd_maxx;
                +
0000de 91e0 0081+LDS R30 , __base_y_G000 + ( 1 )
                 	__GETB1MN __base_y_G000,1
0000e0 0de6      	ADD  R30,R6
                +
0000e1 93e0 0083+STS __base_y_G000 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G000,3
                 ; 0000 0055     i2c_init();
0000e3 d057      	RCALL _i2c_init
                 ; 0000 0056     delay_ms(30);               // 30 ms Delay nach power-up
0000e4 e1ae      	LDI  R26,LOW(30)
0000e5 e0b0      	LDI  R27,0
0000e6 d0a5      	RCALL _delay_ms
                 ; 0000 0057     for (i = 0; i < sizeof(init_sequenz); i++) {
0000e7 e000      	LDI  R16,LOW(0)
                 _0x13:
0000e8 3006      	CPI  R16,6
0000e9 f460      	BRSH _0x14
                 ; 0000 0058         wr_lcd_mode(init_sequenz[i], 0);
0000ea 2fac      	MOV  R26,R28
0000eb 5faf      	SUBI R26,-(1)
0000ec 0fa0      	ADD  R26,R16
0000ed 91ec      	LD   R30,X
0000ee 93ea      	ST   -Y,R30
0000ef e0a0      	LDI  R26,LOW(0)
0000f0 df8a      	RCALL _wr_lcd_mode_G000
                 ; 0000 0059         delay_ms(5);
0000f1 e0a5      	LDI  R26,LOW(5)
0000f2 e0b0      	LDI  R27,0
0000f3 d098      	RCALL _delay_ms
                 ; 0000 005A     }
0000f4 5f0f      	SUBI R16,-1
0000f5 cff2      	RJMP _0x13
                 _0x14:
                 ; 0000 005B }
                 _0x2000002:
0000f6 8108      	LDD  R16,Y+0
0000f7 9628      	ADIW R28,8
0000f8 9508      	RET
                 ; .FEND
                 ;
                 ;void lcd_putchar(char c)
                 ; 0000 005E {
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
                 ; 0000 005F     if (_lcd_x>=_lcd_maxx || c == '\n')
0000f9 93aa      	ST   -Y,R26
                 ;	c -> Y+0
0000fa 1446      	CP   R4,R6
0000fb f418      	BRSH _0x16
0000fc 81a8      	LD   R26,Y
0000fd 30aa      	CPI  R26,LOW(0xA)
0000fe f429      	BRNE _0x15
                 _0x16:
                 ; 0000 0060     {
                 ; 0000 0061         lcd_gotoxy(0,++_lcd_y);
0000ff e0e0      	LDI  R30,LOW(0)
000100 93ea      	ST   -Y,R30
000101 9453      	INC  R5
000102 2da5      	MOV  R26,R5
000103 dfb7      	RCALL _lcd_gotoxy
                 ; 0000 0062     }
                 ; 0000 0063     if (c != '\n') {
                 _0x15:
000104 81a8      	LD   R26,Y
000105 30aa      	CPI  R26,LOW(0xA)
000106 f029      	BREQ _0x18
                 ; 0000 0064         ++_lcd_x;
000107 9443      	INC  R4
                 ; 0000 0065         wr_lcd_mode(c, 1);
000108 81e8      	LD   R30,Y
000109 93ea      	ST   -Y,R30
00010a e0a1      	LDI  R26,LOW(1)
00010b df6f      	RCALL _wr_lcd_mode_G000
                 ; 0000 0066     }
                 ; 0000 0067 }
                 _0x18:
00010c 9621      	ADIW R28,1
00010d 9508      	RET
                 ; .FEND
                 ;
                 ;void lcd_puts(char flash *str)
                 ; 0000 006A {
                 _lcd_puts:
                 ; .FSTART _lcd_puts
                 ; 0000 006B     while (*str) lcd_putchar(*str++);
00010e 93ba      	ST   -Y,R27
00010f 93aa      	ST   -Y,R26
                 ;	*str -> Y+0
                 _0x19:
000110 81e8      	LD   R30,Y
000111 81f9      	LDD  R31,Y+1
000112 95c8      	LPM
000113 2de0      	MOV  R30,R0
000114 30e0      	CPI  R30,0
000115 f051      	BREQ _0x1B
000116 81e8      	LD   R30,Y
000117 81f9      	LDD  R31,Y+1
000118 9631      	ADIW R30,1
000119 83e8      	ST   Y,R30
00011a 83f9      	STD  Y+1,R31
00011b 9731      	SBIW R30,1
00011c 95c8      	LPM
00011d 2da0      	MOV  R26,R0
00011e dfda      	RCALL _lcd_putchar
00011f cff0      	RJMP _0x19
                 _0x1B:
                 ; 0000 006C }
                 _0x2000001:
000120 9622      	ADIW R28,2
000121 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 006F {
                 _main:
                 ; .FSTART _main
                 ; 0000 0070 // Declare your local variables here
                 ; 0000 0071 
                 ; 0000 0072 // Crystal Oscillator division factor: 1
                 ; 0000 0073 #pragma optsize-
                 ; 0000 0074 CLKPR=(1<<CLKPCE);
000122 e8e0      	LDI  R30,LOW(128)
000123 bde6      	OUT  0x26,R30
                 ; 0000 0075 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000124 e0e0      	LDI  R30,LOW(0)
000125 bde6      	OUT  0x26,R30
                 ; 0000 0076 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0077 #pragma optsize+
                 ; 0000 0078 #endif
                 ; 0000 0079 
                 ; 0000 007A // Input/Output Ports initialization
                 ; 0000 007B // Port B initialization
                 ; 0000 007C // Function: Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 007D DDRB=(0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000126 bbe7      	OUT  0x17,R30
                 ; 0000 007E // State: Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 007F PORTB=(0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000127 bbe8      	OUT  0x18,R30
                 ; 0000 0080 
                 ; 0000 0081 // Bit-Banged I2C Bus initialization
                 ; 0000 0082 // I2C Port: PORTB
                 ; 0000 0083 // I2C SDA bit: 0
                 ; 0000 0084 // I2C SCL bit: 1
                 ; 0000 0085 // Bit Rate: 100 kHz
                 ; 0000 0086 // Note: I2C settings are specified in the
                 ; 0000 0087 // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 0088 i2c_init();
000128 d012      	RCALL _i2c_init
                 ; 0000 0089 
                 ; 0000 008A lcd_init(16);
000129 e1a0      	LDI  R26,LOW(16)
00012a df9d      	RCALL _lcd_init
                 ; 0000 008B 
                 ; 0000 008C while (1)
                 _0x1C:
                 ; 0000 008D {
                 ; 0000 008E     lcd_gotoxy(0,0);
00012b e0e0      	LDI  R30,LOW(0)
00012c 93ea      	ST   -Y,R30
00012d e0a0      	LDI  R26,LOW(0)
00012e df8c      	RCALL _lcd_gotoxy
                 ; 0000 008F 
                 ; 0000 0090     lcd_puts("Hello drive2.ru!");
                +
00012f e1a8     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000130 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000131 dfdc      	RCALL _lcd_puts
                 ; 0000 0091     lcd_gotoxy(0,1);
000132 e0e0      	LDI  R30,LOW(0)
000133 93ea      	ST   -Y,R30
000134 e0a1      	LDI  R26,LOW(1)
000135 df85      	RCALL _lcd_gotoxy
                 ; 0000 0092     lcd_puts("test LCD1602 i2c");
                +
000136 e2a9     +LDI R26 , LOW ( 2 * _0x0 + ( 17 ) )
000137 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW2FN _0x0,17
000138 dfd5      	RCALL _lcd_puts
                 ; 0000 0093 }
000139 cff1      	RJMP _0x1C
                 ; 0000 0094 }
                 _0x1F:
00013a cfff      	RJMP _0x1F
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G000:
000080           	.BYTE 0x4
                 _backlight_S0000001000:
000084           	.BYTE 0x1
                 
                 	.CSEG
                 
                 	.CSEG
                 	.equ __sda_bit=0
                 	.equ __scl_bit=1
                 	.equ __i2c_port=0x18 ;PORTB
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
00013b 98c1      	cbi  __i2c_port,__scl_bit
00013c 98c0      	cbi  __i2c_port,__sda_bit
00013d 9ab9      	sbi  __i2c_dir,__scl_bit
00013e 98b8      	cbi  __i2c_dir,__sda_bit
00013f c015      	rjmp __i2c_delay2
                 _i2c_start:
000140 98b8      	cbi  __i2c_dir,__sda_bit
000141 98b9      	cbi  __i2c_dir,__scl_bit
000142 27ee      	clr  r30
000143 0000      	nop
000144 9bb0      	sbis __i2c_pin,__sda_bit
000145 9508      	ret
000146 9bb1      	sbis __i2c_pin,__scl_bit
000147 9508      	ret
000148 d004      	rcall __i2c_delay1
000149 9ab8      	sbi  __i2c_dir,__sda_bit
00014a d002      	rcall __i2c_delay1
00014b 9ab9      	sbi  __i2c_dir,__scl_bit
00014c e0e1      	ldi  r30,1
                 __i2c_delay1:
00014d e062      	ldi  r22,2
00014e c007      	rjmp __i2c_delay2l
                 _i2c_stop:
00014f 9ab8      	sbi  __i2c_dir,__sda_bit
000150 9ab9      	sbi  __i2c_dir,__scl_bit
000151 d003      	rcall __i2c_delay2
000152 98b9      	cbi  __i2c_dir,__scl_bit
000153 dff9      	rcall __i2c_delay1
000154 98b8      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
000155 e064      	ldi  r22,4
                 __i2c_delay2l:
000156 956a      	dec  r22
000157 f7f1      	brne __i2c_delay2l
000158 9508      	ret
                 _i2c_read:
000159 e078      	ldi  r23,8
                 __i2c_read0:
00015a 98b9      	cbi  __i2c_dir,__scl_bit
00015b dff1      	rcall __i2c_delay1
                 __i2c_read3:
00015c 9bb1      	sbis __i2c_pin,__scl_bit
00015d cffe      	rjmp __i2c_read3
00015e dfee      	rcall __i2c_delay1
00015f 9488      	clc
000160 99b0      	sbic __i2c_pin,__sda_bit
000161 9408      	sec
000162 9ab9      	sbi  __i2c_dir,__scl_bit
000163 dff1      	rcall __i2c_delay2
000164 1fee      	rol  r30
000165 957a      	dec  r23
000166 f799      	brne __i2c_read0
000167 2f7a      	mov  r23,r26
000168 2377      	tst  r23
000169 f411      	brne __i2c_read1
00016a 98b8      	cbi  __i2c_dir,__sda_bit
00016b c001      	rjmp __i2c_read2
                 __i2c_read1:
00016c 9ab8      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
00016d dfdf      	rcall __i2c_delay1
00016e 98b9      	cbi  __i2c_dir,__scl_bit
00016f dfe5      	rcall __i2c_delay2
000170 9ab9      	sbi  __i2c_dir,__scl_bit
000171 dfdb      	rcall __i2c_delay1
000172 98b8      	cbi  __i2c_dir,__sda_bit
000173 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
000174 e078      	ldi  r23,8
                 __i2c_write0:
000175 0faa      	lsl  r26
000176 f410      	brcc __i2c_write1
000177 98b8      	cbi  __i2c_dir,__sda_bit
000178 c001      	rjmp __i2c_write2
                 __i2c_write1:
000179 9ab8      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
00017a dfda      	rcall __i2c_delay2
00017b 98b9      	cbi  __i2c_dir,__scl_bit
00017c dfd0      	rcall __i2c_delay1
                 __i2c_write3:
00017d 9bb1      	sbis __i2c_pin,__scl_bit
00017e cffe      	rjmp __i2c_write3
00017f dfcd      	rcall __i2c_delay1
000180 9ab9      	sbi  __i2c_dir,__scl_bit
000181 957a      	dec  r23
000182 f791      	brne __i2c_write0
000183 98b8      	cbi  __i2c_dir,__sda_bit
000184 dfc8      	rcall __i2c_delay1
000185 98b9      	cbi  __i2c_dir,__scl_bit
000186 dfce      	rcall __i2c_delay2
000187 e0e1      	ldi  r30,1
000188 99b0      	sbic __i2c_pin,__sda_bit
000189 27ee      	clr  r30
00018a 9ab9      	sbi  __i2c_dir,__scl_bit
00018b cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
00018c 9610      	adiw r26,0
00018d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00018e e28c     +LDI R24 , LOW ( 0x12C )
00018f e091     +LDI R25 , HIGH ( 0x12C )
                +__DELAY_USW_LOOP :
000190 9701     +SBIW R24 , 1
000191 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x12C
000192 95a8      	wdr
000193 9711      	sbiw r26,1
000194 f7c9      	brne __delay_ms0
                 __delay_ms1:
000195 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny13A register use summary:
r0 :   9 r1 :   2 r2 :   0 r3 :   0 r4 :   3 r5 :   3 r6 :   4 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  15 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   5 r23:   8 
r24:   9 r25:   2 r26:  56 r27:   7 r28:  11 r29:   0 r30: 120 r31:   7 
x  :   5 y  :  64 z  :   1 
Registers used: 18 out of 35 (51.4%)

ATtiny13A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   5 
adiw  :  14 and   :   0 andi  :   5 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   6 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  13 brpl  :   0 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  15 
cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :   3 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   2 
cpc   :   0 cpi   :   9 cpse  :   0 dec   :   5 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 
inc   :   2 ld    :  12 ldd   :  19 ldi   :  55 lds   :   3 lpm   :  27 
lsl   :   2 lsr   :   0 mov   :  22 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   1 or    :   3 ori   :   3 out   :   7 
pop   :   0 push  :   0 rcall :  36 ret   :   8 reti  :   0 rjmp  :  31 
rol   :   1 ror   :   0 sbc   :   0 sbci  :   0 sbi   :  11 sbic  :   2 
sbis  :   4 sbiw  :   8 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   1 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  27 std   :  12 
sts   :   3 sub   :   0 subi  :   5 swap  :   1 tst   :   1 wdr   :   1 

Instructions used: 43 out of 114 (37.7%)

ATtiny13A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00032c    760     52    812    1024  79.3%
[.dseg] 0x000060 0x000085      0      5      5      64   7.8%
[.eseg] 0x000000 0x000000      0      0      0      64   0.0%

Assembly complete, 0 errors, 4 warnings
