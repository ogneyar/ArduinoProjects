
Attiny13_sleep_wdt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000068  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000356  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000302  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ad  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000232  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000c1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	08 c0       	rjmp	.+16     	; 0x22 <__vector_8>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	14 d0       	rcall	.+40     	; 0x46 <main>
  1e:	22 c0       	rjmp	.+68     	; 0x64 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <__vector_8>:
#include <avr/io.h>
#include <avr/interrupt.h>

// обработчик прерывани€ вачдога.
ISR(WDT_vect) {
  22:	1f 92       	push	r1
  24:	0f 92       	push	r0
  26:	0f b6       	in	r0, 0x3f	; 63
  28:	0f 92       	push	r0
  2a:	11 24       	eor	r1, r1
  2c:	8f 93       	push	r24
  2e:	9f 93       	push	r25
	// выход из сна
	PORTB^=(1<<PB0);// помен€ть состо€ние пина
  30:	98 b3       	in	r25, 0x18	; 24
  32:	81 e0       	ldi	r24, 0x01	; 1
  34:	89 27       	eor	r24, r25
  36:	88 bb       	out	0x18, r24	; 24
}
  38:	9f 91       	pop	r25
  3a:	8f 91       	pop	r24
  3c:	0f 90       	pop	r0
  3e:	0f be       	out	0x3f, r0	; 63
  40:	0f 90       	pop	r0
  42:	1f 90       	pop	r1
  44:	18 95       	reti

00000046 <main>:

int main(void)
{
	MCUCR|=(1<<SE);// разрешить сон
  46:	85 b7       	in	r24, 0x35	; 53
  48:	80 62       	ori	r24, 0x20	; 32
  4a:	85 bf       	out	0x35, r24	; 53
	MCUCR|=(1<<SM1);// выбор режима сна - power down
  4c:	85 b7       	in	r24, 0x35	; 53
  4e:	80 61       	ori	r24, 0x10	; 16
  50:	85 bf       	out	0x35, r24	; 53
	
	DDRB|=(1<<PB0);
  52:	b8 9a       	sbi	0x17, 0	; 23
	
	WDTCR|=(1<<WDCE) | (1<<WDE);// разрешение изменени€ вачдога ( действует 4 такта)
  54:	81 b5       	in	r24, 0x21	; 33
  56:	88 61       	ori	r24, 0x18	; 24
  58:	81 bd       	out	0x21, r24	; 33
	WDTCR=(1<<WDTIE) | (1<<WDP2) | (1<<WDP0);// разрешение прерывани€ вачдога и запуск на 0.5 секунды
  5a:	85 e4       	ldi	r24, 0x45	; 69
  5c:	81 bd       	out	0x21, r24	; 33
	//WDTCR=(1<<WDTIE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);// разрешение прерывани€ вачдога и запуск на 2 секунды
	
	sei();// глобально разрешить прерывани€
  5e:	78 94       	sei
    while (1) 
    {
		
		asm("sleep");// уход в сон
  60:	88 95       	sleep
  62:	fe cf       	rjmp	.-4      	; 0x60 <main+0x1a>

00000064 <_exit>:
  64:	f8 94       	cli

00000066 <__stop_program>:
  66:	ff cf       	rjmp	.-2      	; 0x66 <__stop_program>
