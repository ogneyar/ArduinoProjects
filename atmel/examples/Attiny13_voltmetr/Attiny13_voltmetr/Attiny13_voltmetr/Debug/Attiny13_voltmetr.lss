
Attiny13_voltmetr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000026e  000002e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d1  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a2  00000000  00000000  00000db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057e  00000000  00000000  00001353  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000018d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c0  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000056d  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000022e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ee e6       	ldi	r30, 0x6E	; 110
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	aa 36       	cpi	r26, 0x6A	; 106
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>
  32:	34 d0       	rcall	.+104    	; 0x9c <main>
  34:	1a c1       	rjmp	.+564    	; 0x26a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <_Z13adc_setup_VCCv>:


// настройка с опорным напряжением от VCC
void adc_setup_VCC (void)
{
	ADMUX |= (1 << MUX0); // устанавливаем как вход АЦП ножку PB2 ака ADC1
  38:	38 9a       	sbi	0x07, 0	; 7
	ADMUX |= (1 << ADLAR);//
  3a:	3d 9a       	sbi	0x07, 5	; 7
	DIDR0 |=(1<<ADC1D); // отключаем цифровой вход на PB2 ака ADC1
  3c:	a2 9a       	sbi	0x14, 2	; 20
	
	//  разрешение АЦП, без делителя(вернее минимальный) так пошумнее.
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADEN);
  3e:	86 b1       	in	r24, 0x06	; 6
  40:	86 68       	ori	r24, 0x86	; 134
  42:	86 b9       	out	0x06, r24	; 6
  44:	08 95       	ret

00000046 <_Z10adc_read16v>:


// возвращение 16 битного АЦП
uint16_t adc_read16 (void)
{
	ADCSRA |= (1 << ADSC);// Запуск измерений
  46:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC));// Ожидание окончания измерений т.е. пока ADCS не станет=0 ждем.
  48:	36 99       	sbic	0x06, 6	; 6
  4a:	fe cf       	rjmp	.-4      	; 0x48 <_Z10adc_read16v+0x2>
	return ADC>>6; // функция возвращает данные со сдвигом на 6 бит в право т.к. они не содержат полезной информации
  4c:	84 b1       	in	r24, 0x04	; 4
  4e:	95 b1       	in	r25, 0x05	; 5
}
  50:	00 24       	eor	r0, r0
  52:	88 0f       	add	r24, r24
  54:	99 1f       	adc	r25, r25
  56:	00 1c       	adc	r0, r0
  58:	88 0f       	add	r24, r24
  5a:	99 1f       	adc	r25, r25
  5c:	00 1c       	adc	r0, r0
  5e:	89 2f       	mov	r24, r25
  60:	90 2d       	mov	r25, r0
  62:	08 95       	ret

00000064 <_Z8median_3jjj>:

		
// медианный фильтр из 3-х значений
uint16_t median_3(uint16_t a, uint16_t b, uint16_t c) {
	uint16_t value;
	if ((a <= b) && (a <= c)) {
  64:	68 17       	cp	r22, r24
  66:	79 07       	cpc	r23, r25
  68:	60 f0       	brcs	.+24     	; 0x82 <_Z8median_3jjj+0x1e>
  6a:	48 17       	cp	r20, r24
  6c:	59 07       	cpc	r21, r25
  6e:	30 f0       	brcs	.+12     	; 0x7c <_Z8median_3jjj+0x18>
  70:	cb 01       	movw	r24, r22
  72:	46 17       	cp	r20, r22
  74:	57 07       	cpc	r21, r23
  76:	88 f4       	brcc	.+34     	; 0x9a <_Z8median_3jjj+0x36>
  78:	ca 01       	movw	r24, r20
  7a:	08 95       	ret
		value = (b <= c) ? b : c;
	}
	else {
		if ((b <= a) && (b <= c)) {
  7c:	86 17       	cp	r24, r22
  7e:	97 07       	cpc	r25, r23
  80:	40 f0       	brcs	.+16     	; 0x92 <_Z8median_3jjj+0x2e>
  82:	46 17       	cp	r20, r22
  84:	57 07       	cpc	r21, r23
  86:	28 f0       	brcs	.+10     	; 0x92 <_Z8median_3jjj+0x2e>
  88:	48 17       	cp	r20, r24
  8a:	59 07       	cpc	r21, r25
  8c:	30 f4       	brcc	.+12     	; 0x9a <_Z8median_3jjj+0x36>
  8e:	ca 01       	movw	r24, r20
  90:	08 95       	ret
  92:	68 17       	cp	r22, r24
  94:	79 07       	cpc	r23, r25
  96:	08 f4       	brcc	.+2      	; 0x9a <_Z8median_3jjj+0x36>
  98:	cb 01       	movw	r24, r22
		else {
			value = (a <= b) ? a : b;
		}
	}
	return value;
}
  9a:	08 95       	ret

0000009c <main>:

// Uизм = ((Uref/1023)*adc)*k
// k=(47k+(pot10k+3.3k))/(pot10k+3.3k)
int main(void)
{
	adc_setup_VCC();
  9c:	cd df       	rcall	.-102    	; 0x38 <_Z13adc_setup_VCCv>
			adc_sum=adc_sum + median_3(adc_buf[0], adc_buf[1], adc_buf[2]);// складываем все значения
		}
		adc_val= adc_sum/200; // вычислям среднее
		adc_sum=0;
		Volt=(3*adc_val);// считаем сколько это в вольтах x100
		indication(Volt);
  9e:	0f 2e       	mov	r0, r31
  a0:	f8 ec       	ldi	r31, 0xC8	; 200
  a2:	4f 2e       	mov	r4, r31
  a4:	51 2c       	mov	r5, r1
  a6:	61 2c       	mov	r6, r1
  a8:	71 2c       	mov	r7, r1
  aa:	f0 2d       	mov	r31, r0
//------------------------------------------------------

// Uизм = ((Uref/1023)*adc)*k
// k=(47k+(pot10k+3.3k))/(pot10k+3.3k)
int main(void)
{
  ac:	c8 ec       	ldi	r28, 0xC8	; 200
  ae:	c1 2c       	mov	r12, r1
  b0:	d1 2c       	mov	r13, r1
  b2:	76 01       	movw	r14, r12
    {
		// версия 1
		for (uint8_t i=0; i<200; i++)
		{

			adc_buf[0]=adc_read16();
  b4:	c8 df       	rcall	.-112    	; 0x46 <_Z10adc_read16v>
  b6:	8c 01       	movw	r16, r24
			adc_buf[1]=adc_read16();
  b8:	c6 df       	rcall	.-116    	; 0x46 <_Z10adc_read16v>
  ba:	5c 01       	movw	r10, r24
			adc_buf[2]=adc_read16();
  bc:	c4 df       	rcall	.-120    	; 0x46 <_Z10adc_read16v>

			adc_sum=adc_sum + median_3(adc_buf[0], adc_buf[1], adc_buf[2]);// складываем все значения
  be:	ac 01       	movw	r20, r24
  c0:	b5 01       	movw	r22, r10
  c2:	c8 01       	movw	r24, r16
  c4:	cf df       	rcall	.-98     	; 0x64 <_Z8median_3jjj>
  c6:	c8 0e       	add	r12, r24
  c8:	d9 1e       	adc	r13, r25
  ca:	e1 1c       	adc	r14, r1
  cc:	f1 1c       	adc	r15, r1
  ce:	c1 50       	subi	r28, 0x01	; 1
	uint16_t adc_val=0; // итоговое значение АЦП (среднее от суммы средне медианных)
	uint16_t Volt=0; // итоговое в вольтах
    while (1) 
    {
		// версия 1
		for (uint8_t i=0; i<200; i++)
  d0:	89 f7       	brne	.-30     	; 0xb4 <__stack+0x15>
			adc_sum=adc_sum + median_3(adc_buf[0], adc_buf[1], adc_buf[2]);// складываем все значения
		}
		adc_val= adc_sum/200; // вычислям среднее
		adc_sum=0;
		Volt=(3*adc_val);// считаем сколько это в вольтах x100
		indication(Volt);
  d2:	c7 01       	movw	r24, r14
  d4:	b6 01       	movw	r22, r12
  d6:	a3 01       	movw	r20, r6
  d8:	92 01       	movw	r18, r4
  da:	a5 d0       	rcall	.+330    	; 0x226 <__udivmodsi4>
  dc:	c9 01       	movw	r24, r18
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	82 0f       	add	r24, r18
  e4:	93 1f       	adc	r25, r19
  e6:	4d d0       	rcall	.+154    	; 0x182 <_Z10indicationj>
	adc_setup_VCC();
	uint32_t adc_sum=0;// сумма всех измерений
	uint16_t adc_buf[3];// под три замера АЦП
	uint16_t adc_val=0; // итоговое значение АЦП (среднее от суммы средне медианных)
	uint16_t Volt=0; // итоговое в вольтах
    while (1) 
  e8:	e1 cf       	rjmp	.-62     	; 0xac <__stack+0xd>

000000ea <_Z5startv>:



void start(void)
{
	DDRB|=(1<<_CLK);
  ea:	b8 9a       	sbi	0x17, 0	; 23
	DDRB|=(1<<_DIO);
  ec:	b9 9a       	sbi	0x17, 1	; 23
	PORTB |= (1<<_CLK);
  ee:	c0 9a       	sbi	0x18, 0	; 24
	PORTB |= (1<<_DIO);
  f0:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <_Z5startv+0xa>
	_delay_us(5);
	PORTB &=~ (1<<_DIO);
  f8:	c1 98       	cbi	0x18, 1	; 24
	PORTB &=~ (1<<_CLK);
  fa:	c0 98       	cbi	0x18, 0	; 24
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <_Z5startv+0x14>
 102:	08 95       	ret

00000104 <_Z4stopv>:
	_delay_us(5);
}

void stop(void)
{
	DDRB|=(1<<_CLK);
 104:	b8 9a       	sbi	0x17, 0	; 23
	DDRB|=(1<<_DIO);
 106:	b9 9a       	sbi	0x17, 1	; 23
	PORTB &=~ (1<<_CLK);
 108:	c0 98       	cbi	0x18, 0	; 24
	PORTB &=~ (1<<_DIO);
 10a:	c1 98       	cbi	0x18, 1	; 24
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <_Z4stopv+0xa>
	_delay_us(5);
	PORTB |= (1<<_CLK);
 112:	c0 9a       	sbi	0x18, 0	; 24
	PORTB |= (1<<_DIO);
 114:	c1 9a       	sbi	0x18, 1	; 24
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <_Z4stopv+0x14>
 11c:	08 95       	ret

0000011e <_Z10writeValueh>:
	_delay_us(5);
}

void writeValue(uint8_t value)
{
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	50 e0       	ldi	r21, 0x00	; 0
	for(uint8_t i = 0; i < 8; i++)
	{
		PORTB &=~ (1<<_CLK);
		_delay_us(5);
		bool not_null = ((value & (1 << i)) >> i);
		if(not_null)
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0

void writeValue(uint8_t value)
{
	for(uint8_t i = 0; i < 8; i++)
	{
		PORTB &=~ (1<<_CLK);
 128:	c0 98       	cbi	0x18, 0	; 24
 12a:	22 e0       	ldi	r18, 0x02	; 2
 12c:	2a 95       	dec	r18
 12e:	f1 f7       	brne	.-4      	; 0x12c <_Z10writeValueh+0xe>
		_delay_us(5);
		bool not_null = ((value & (1 << i)) >> i);
		if(not_null)
 130:	9b 01       	movw	r18, r22
 132:	04 2e       	mov	r0, r20
 134:	02 c0       	rjmp	.+4      	; 0x13a <_Z10writeValueh+0x1c>
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <_Z10writeValueh+0x18>
 13e:	28 23       	and	r18, r24
 140:	39 23       	and	r19, r25
 142:	04 2e       	mov	r0, r20
 144:	02 c0       	rjmp	.+4      	; 0x14a <_Z10writeValueh+0x2c>
 146:	35 95       	asr	r19
 148:	27 95       	ror	r18
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <_Z10writeValueh+0x28>
 14e:	23 2b       	or	r18, r19
 150:	11 f0       	breq	.+4      	; 0x156 <_Z10writeValueh+0x38>
		PORTB |= (1<<_DIO);
 152:	c1 9a       	sbi	0x18, 1	; 24
 154:	01 c0       	rjmp	.+2      	; 0x158 <_Z10writeValueh+0x3a>
		else
		PORTB &=~ (1<<_DIO);
 156:	c1 98       	cbi	0x18, 1	; 24
 158:	22 e0       	ldi	r18, 0x02	; 2
 15a:	2a 95       	dec	r18
 15c:	f1 f7       	brne	.-4      	; 0x15a <_Z10writeValueh+0x3c>
		_delay_us(5);
		PORTB |= (1<<_CLK);
 15e:	c0 9a       	sbi	0x18, 0	; 24
 160:	22 e0       	ldi	r18, 0x02	; 2
 162:	2a 95       	dec	r18
 164:	f1 f7       	brne	.-4      	; 0x162 <_Z10writeValueh+0x44>
 166:	4f 5f       	subi	r20, 0xFF	; 255
 168:	5f 4f       	sbci	r21, 0xFF	; 255
	_delay_us(5);
}

void writeValue(uint8_t value)
{
	for(uint8_t i = 0; i < 8; i++)
 16a:	48 30       	cpi	r20, 0x08	; 8
 16c:	51 05       	cpc	r21, r1
 16e:	e1 f6       	brne	.-72     	; 0x128 <_Z10writeValueh+0xa>
		PORTB &=~ (1<<_DIO);
		_delay_us(5);
		PORTB |= (1<<_CLK);
		_delay_us(5);
	}
	PORTB &=~ (1<<_CLK);
 170:	c0 98       	cbi	0x18, 0	; 24
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <_Z10writeValueh+0x56>
	_delay_us(5);
	PORTB |= (1<<_CLK);
 178:	c0 9a       	sbi	0x18, 0	; 24
 17a:	22 e0       	ldi	r18, 0x02	; 2
 17c:	2a 95       	dec	r18
 17e:	f1 f7       	brne	.-4      	; 0x17c <_Z10writeValueh+0x5e>
 180:	08 95       	ret

00000182 <_Z10indicationj>:




void indication(uint16_t n)
{
 182:	ef 92       	push	r14
 184:	ff 92       	push	r15
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	dd 27       	eor	r29, r29
 192:	c4 50       	subi	r28, 0x04	; 4
 194:	cd bf       	out	0x3d, r28	; 61
 196:	9e 01       	movw	r18, r28
 198:	2f 5f       	subi	r18, 0xFF	; 255
 19a:	3f 4f       	sbci	r19, 0xFF	; 255
 19c:	7e 01       	movw	r14, r28
 19e:	45 e0       	ldi	r20, 0x05	; 5
 1a0:	e4 0e       	add	r14, r20
 1a2:	f1 1c       	adc	r15, r1
	uint8_t buf[4];
	for (uint8_t i = 0; i < 4; i++) 
	{ 
		buf[i] = digits[n % 10]; // записываем остаток в буфер
 1a4:	0a e0       	ldi	r16, 0x0A	; 10
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	b8 01       	movw	r22, r16
 1aa:	29 d0       	rcall	.+82     	; 0x1fe <__udivmodhi4>
 1ac:	fc 01       	movw	r30, r24
 1ae:	e0 5a       	subi	r30, 0xA0	; 160
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	80 81       	ld	r24, Z
 1b4:	f9 01       	movw	r30, r18
 1b6:	81 93       	st	Z+, r24
 1b8:	9f 01       	movw	r18, r30
		n /= 10;         // "сдвигаем" число
 1ba:	86 2f       	mov	r24, r22
 1bc:	97 2f       	mov	r25, r23


void indication(uint16_t n)
{
	uint8_t buf[4];
	for (uint8_t i = 0; i < 4; i++) 
 1be:	ee 15       	cp	r30, r14
 1c0:	ff 05       	cpc	r31, r15
 1c2:	91 f7       	brne	.-28     	; 0x1a8 <_Z10indicationj+0x26>
	{ 
		buf[i] = digits[n % 10]; // записываем остаток в буфер
		n /= 10;         // "сдвигаем" число
	}
	start();
 1c4:	92 df       	rcall	.-220    	; 0xea <_Z5startv>
	writeValue(SetBright); // яркость, настраивается в main.h
 1c6:	89 e8       	ldi	r24, 0x89	; 137
 1c8:	aa df       	rcall	.-172    	; 0x11e <_Z10writeValueh>
	start();
 1ca:	8f df       	rcall	.-226    	; 0xea <_Z5startv>
	writeValue(0x40); // писать в регистры дисплея
 1cc:	80 e4       	ldi	r24, 0x40	; 64
 1ce:	a7 df       	rcall	.-178    	; 0x11e <_Z10writeValueh>
	stop();
 1d0:	99 df       	rcall	.-206    	; 0x104 <_Z4stopv>
	start();
 1d2:	8b df       	rcall	.-234    	; 0xea <_Z5startv>
	writeValue(0xc0); // вывод с 1-го разряда.
 1d4:	80 ec       	ldi	r24, 0xC0	; 192
 1d6:	a3 df       	rcall	.-186    	; 0x11e <_Z10writeValueh>
	writeValue(buf[3]);
 1d8:	8c 81       	ldd	r24, Y+4	; 0x04
 1da:	a1 df       	rcall	.-190    	; 0x11e <_Z10writeValueh>
	writeValue(buf[2]+128); // +128 это точка, сташий бит врубаем
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	80 58       	subi	r24, 0x80	; 128
 1e0:	9e df       	rcall	.-196    	; 0x11e <_Z10writeValueh>
	writeValue(buf[1]);
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	9c df       	rcall	.-200    	; 0x11e <_Z10writeValueh>
	writeValue(buf[0]);
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	9a df       	rcall	.-204    	; 0x11e <_Z10writeValueh>
	stop();
 1ea:	8c df       	rcall	.-232    	; 0x104 <_Z4stopv>
}
 1ec:	cc 5f       	subi	r28, 0xFC	; 252
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	08 95       	ret

000001fe <__udivmodhi4>:
 1fe:	aa 1b       	sub	r26, r26
 200:	bb 1b       	sub	r27, r27
 202:	51 e1       	ldi	r21, 0x11	; 17
 204:	07 c0       	rjmp	.+14     	; 0x214 <__udivmodhi4_ep>

00000206 <__udivmodhi4_loop>:
 206:	aa 1f       	adc	r26, r26
 208:	bb 1f       	adc	r27, r27
 20a:	a6 17       	cp	r26, r22
 20c:	b7 07       	cpc	r27, r23
 20e:	10 f0       	brcs	.+4      	; 0x214 <__udivmodhi4_ep>
 210:	a6 1b       	sub	r26, r22
 212:	b7 0b       	sbc	r27, r23

00000214 <__udivmodhi4_ep>:
 214:	88 1f       	adc	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	5a 95       	dec	r21
 21a:	a9 f7       	brne	.-22     	; 0x206 <__udivmodhi4_loop>
 21c:	80 95       	com	r24
 21e:	90 95       	com	r25
 220:	bc 01       	movw	r22, r24
 222:	cd 01       	movw	r24, r26
 224:	08 95       	ret

00000226 <__udivmodsi4>:
 226:	a1 e2       	ldi	r26, 0x21	; 33
 228:	1a 2e       	mov	r1, r26
 22a:	aa 1b       	sub	r26, r26
 22c:	bb 1b       	sub	r27, r27
 22e:	fd 01       	movw	r30, r26
 230:	0d c0       	rjmp	.+26     	; 0x24c <__udivmodsi4_ep>

00000232 <__udivmodsi4_loop>:
 232:	aa 1f       	adc	r26, r26
 234:	bb 1f       	adc	r27, r27
 236:	ee 1f       	adc	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	a2 17       	cp	r26, r18
 23c:	b3 07       	cpc	r27, r19
 23e:	e4 07       	cpc	r30, r20
 240:	f5 07       	cpc	r31, r21
 242:	20 f0       	brcs	.+8      	; 0x24c <__udivmodsi4_ep>
 244:	a2 1b       	sub	r26, r18
 246:	b3 0b       	sbc	r27, r19
 248:	e4 0b       	sbc	r30, r20
 24a:	f5 0b       	sbc	r31, r21

0000024c <__udivmodsi4_ep>:
 24c:	66 1f       	adc	r22, r22
 24e:	77 1f       	adc	r23, r23
 250:	88 1f       	adc	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	1a 94       	dec	r1
 256:	69 f7       	brne	.-38     	; 0x232 <__udivmodsi4_loop>
 258:	60 95       	com	r22
 25a:	70 95       	com	r23
 25c:	80 95       	com	r24
 25e:	90 95       	com	r25
 260:	9b 01       	movw	r18, r22
 262:	ac 01       	movw	r20, r24
 264:	bd 01       	movw	r22, r26
 266:	cf 01       	movw	r24, r30
 268:	08 95       	ret

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
