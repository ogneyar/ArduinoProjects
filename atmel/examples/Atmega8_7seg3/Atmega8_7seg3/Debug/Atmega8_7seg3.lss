
Atmega8_7seg3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000206  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000206  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080006a  0080006a  000002a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000916  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000645  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044e  00000000  00000000  000012cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  0000171c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000349  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000099  00000000  00000000  00001b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001ba6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	61 c0       	rjmp	.+194    	; 0xca <__vector_3>
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e0       	ldi	r30, 0x06	; 6
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 37       	cpi	r26, 0x73	; 115
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	87 d0       	rcall	.+270    	; 0x168 <main>
  5a:	d3 c0       	rjmp	.+422    	; 0x202 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <display_bright>:
uint8_t digit[10]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6f};// символы с 0 по 9
uint8_t buff[4];// буфер
uint8_t bright[4];// массив €ркости разр€дов

void display_bright(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3){
	bright[3]=b3;
  5e:	ef e6       	ldi	r30, 0x6F	; 111
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	23 83       	std	Z+3, r18	; 0x03
	bright[2]=b2;
  64:	42 83       	std	Z+2, r20	; 0x02
	bright[1]=b1;
  66:	61 83       	std	Z+1, r22	; 0x01
	bright[0]=b0;
  68:	80 83       	st	Z, r24
  6a:	08 95       	ret

0000006c <display>:
}

void display(uint8_t n0, uint8_t n1, uint8_t n2, uint8_t n3)
{
	buff[3]=digit[n3];
  6c:	ab e6       	ldi	r26, 0x6B	; 107
  6e:	b0 e0       	ldi	r27, 0x00	; 0
  70:	e2 2f       	mov	r30, r18
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	e0 5a       	subi	r30, 0xA0	; 160
  76:	ff 4f       	sbci	r31, 0xFF	; 255
  78:	90 81       	ld	r25, Z
  7a:	13 96       	adiw	r26, 0x03	; 3
  7c:	9c 93       	st	X, r25
  7e:	13 97       	sbiw	r26, 0x03	; 3
	buff[2]=digit[n2];
  80:	e4 2f       	mov	r30, r20
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	e0 5a       	subi	r30, 0xA0	; 160
  86:	ff 4f       	sbci	r31, 0xFF	; 255
  88:	90 81       	ld	r25, Z
  8a:	12 96       	adiw	r26, 0x02	; 2
  8c:	9c 93       	st	X, r25
  8e:	12 97       	sbiw	r26, 0x02	; 2
	buff[1]=digit[n1];
  90:	e6 2f       	mov	r30, r22
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	e0 5a       	subi	r30, 0xA0	; 160
  96:	ff 4f       	sbci	r31, 0xFF	; 255
  98:	90 81       	ld	r25, Z
  9a:	11 96       	adiw	r26, 0x01	; 1
  9c:	9c 93       	st	X, r25
  9e:	11 97       	sbiw	r26, 0x01	; 1
	buff[0]=digit[n0];
  a0:	e8 2f       	mov	r30, r24
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	e0 5a       	subi	r30, 0xA0	; 160
  a6:	ff 4f       	sbci	r31, 0xFF	; 255
  a8:	80 81       	ld	r24, Z
  aa:	8c 93       	st	X, r24
  ac:	08 95       	ret

000000ae <display_ini>:
}

// инициализаци€ индикации
void display_ini(void){
	DDRB=255;// пины сегментов на выход
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 bb       	out	0x17, r24	; 23
	DDRC|=(1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);// пины разр€дов на выход
  b2:	84 b3       	in	r24, 0x14	; 20
  b4:	8f 60       	ori	r24, 0x0F	; 15
  b6:	84 bb       	out	0x14, r24	; 20
	
	TCCR2|=(1<<CS22);// запуск таймера 2 с делителем 64
  b8:	85 b5       	in	r24, 0x25	; 37
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	85 bd       	out	0x25, r24	; 37
	TIMSK|=(1<<TOIE2) | (1<<OCIE2);// разрешить прерывание по переполнению и совпадению
  be:	89 b7       	in	r24, 0x39	; 57
  c0:	80 6c       	ori	r24, 0xC0	; 192
  c2:	89 bf       	out	0x39, r24	; 57
	OCR2=100;
  c4:	84 e6       	ldi	r24, 0x64	; 100
  c6:	83 bd       	out	0x23, r24	; 35
  c8:	08 95       	ret

000000ca <__vector_3>:
}


ISR(TIMER2_COMP_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
	PORTC&=0xF0;// выключить все разр€ды
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	85 bb       	out	0x15, r24	; 21
}
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <__vector_4>:

//обработчик прерывани€ по переполнению таймера 2
ISR(TIMER2_OVF_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
	uint8_t static status;
	
	switch (status)
  f4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	89 f0       	breq	.+34     	; 0x11e <__vector_4+0x36>
  fc:	28 f0       	brcs	.+10     	; 0x108 <__vector_4+0x20>
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	c9 f0       	breq	.+50     	; 0x134 <__vector_4+0x4c>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	11 f1       	breq	.+68     	; 0x14a <__vector_4+0x62>
 106:	2a c0       	rjmp	.+84     	; 0x15c <__vector_4+0x74>
	{
		case 0:// разр€д 0
		PORTB=buff[0];
 108:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <buff>
 10c:	88 bb       	out	0x18, r24	; 24
		PORTC|=(1<<PC3);
 10e:	ab 9a       	sbi	0x15, 3	; 21
		OCR2=bright[0];
 110:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <bright>
 114:	83 bd       	out	0x23, r24	; 35
		status=1;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
		break;
 11c:	1f c0       	rjmp	.+62     	; 0x15c <__vector_4+0x74>
		
		case 1:// разр€д 1
		PORTB=buff[1];
 11e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <buff+0x1>
 122:	88 bb       	out	0x18, r24	; 24
		PORTC|=(1<<PC2);
 124:	aa 9a       	sbi	0x15, 2	; 21
		OCR2=bright[1];
 126:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <bright+0x1>
 12a:	83 bd       	out	0x23, r24	; 35
		status=2;
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
		break;
 132:	14 c0       	rjmp	.+40     	; 0x15c <__vector_4+0x74>
		
		case 2:// разр€д 2
		PORTB=buff[2];
 134:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <buff+0x2>
 138:	88 bb       	out	0x18, r24	; 24
		PORTC|=(1<<PC1);
 13a:	a9 9a       	sbi	0x15, 1	; 21
		OCR2=bright[2];
 13c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <bright+0x2>
 140:	83 bd       	out	0x23, r24	; 35
		status=3;
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
		break;
 148:	09 c0       	rjmp	.+18     	; 0x15c <__vector_4+0x74>
		
		case 3:// разр€д 3
		PORTB=buff[3];
 14a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <buff+0x3>
 14e:	88 bb       	out	0x18, r24	; 24
		PORTC|=(1<<PC0);
 150:	a8 9a       	sbi	0x15, 0	; 21
		OCR2=bright[3];
 152:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <bright+0x3>
 156:	83 bd       	out	0x23, r24	; 35
		status=0;
 158:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
		break;
	}
	
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <main>:
#include "main.h"

int main(void)
{
	display_ini();
 168:	a2 df       	rcall	.-188    	; 0xae <display_ini>
	display(1,2,3,4);
 16a:	24 e0       	ldi	r18, 0x04	; 4
 16c:	43 e0       	ldi	r20, 0x03	; 3
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	7c df       	rcall	.-264    	; 0x6c <display>
	display_bright(150,150,150,150);
 174:	26 e9       	ldi	r18, 0x96	; 150
 176:	46 e9       	ldi	r20, 0x96	; 150
 178:	66 e9       	ldi	r22, 0x96	; 150
 17a:	86 e9       	ldi	r24, 0x96	; 150
 17c:	70 df       	rcall	.-288    	; 0x5e <display_bright>
	sei();
 17e:	78 94       	sei
    while (1) 
    {
		while(PIND&(1<<PD2));
 180:	82 99       	sbic	0x10, 2	; 16
 182:	fe cf       	rjmp	.-4      	; 0x180 <main+0x18>
		display_bright(50,50,250,250);
 184:	2a ef       	ldi	r18, 0xFA	; 250
 186:	4a ef       	ldi	r20, 0xFA	; 250
 188:	62 e3       	ldi	r22, 0x32	; 50
 18a:	82 e3       	ldi	r24, 0x32	; 50
 18c:	68 df       	rcall	.-304    	; 0x5e <display_bright>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	89 e6       	ldi	r24, 0x69	; 105
 192:	98 e1       	ldi	r25, 0x18	; 24
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x2c>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x36>
 19e:	00 00       	nop
		_delay_ms(1000);
		
		while(PIND&(1<<PD2));
 1a0:	82 99       	sbic	0x10, 2	; 16
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <main+0x38>
		display_bright(250,250,50,50);
 1a4:	22 e3       	ldi	r18, 0x32	; 50
 1a6:	42 e3       	ldi	r20, 0x32	; 50
 1a8:	6a ef       	ldi	r22, 0xFA	; 250
 1aa:	8a ef       	ldi	r24, 0xFA	; 250
 1ac:	58 df       	rcall	.-336    	; 0x5e <display_bright>
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	89 e6       	ldi	r24, 0x69	; 105
 1b2:	98 e1       	ldi	r25, 0x18	; 24
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x4c>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x56>
 1be:	00 00       	nop
		_delay_ms(1000);
		
		
		while(PIND&(1<<PD2));
 1c0:	82 99       	sbic	0x10, 2	; 16
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <main+0x58>
		display_bright(250,50,250,50);
 1c4:	22 e3       	ldi	r18, 0x32	; 50
 1c6:	4a ef       	ldi	r20, 0xFA	; 250
 1c8:	62 e3       	ldi	r22, 0x32	; 50
 1ca:	8a ef       	ldi	r24, 0xFA	; 250
 1cc:	48 df       	rcall	.-368    	; 0x5e <display_bright>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	89 e6       	ldi	r24, 0x69	; 105
 1d2:	98 e1       	ldi	r25, 0x18	; 24
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x6c>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x76>
 1de:	00 00       	nop
		_delay_ms(1000);
		
		
		while(PIND&(1<<PD2));
 1e0:	82 99       	sbic	0x10, 2	; 16
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <main+0x78>
		display_bright(50,250,50,250);
 1e4:	2a ef       	ldi	r18, 0xFA	; 250
 1e6:	42 e3       	ldi	r20, 0x32	; 50
 1e8:	6a ef       	ldi	r22, 0xFA	; 250
 1ea:	82 e3       	ldi	r24, 0x32	; 50
 1ec:	38 df       	rcall	.-400    	; 0x5e <display_bright>
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	89 e6       	ldi	r24, 0x69	; 105
 1f2:	98 e1       	ldi	r25, 0x18	; 24
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0x8c>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x96>
 1fe:	00 00       	nop
 200:	bf cf       	rjmp	.-130    	; 0x180 <main+0x18>

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
