
Attiny13_led_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000005e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000039e  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000030d  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f5  00000000  00000000  00000803  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000009f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000240  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	1a d0       	rcall	.+52     	; 0x52 <main>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <pwm_ini>:
#include <avr/io.h>

// настройки ШИМ
void pwm_ini(void){
	TCCR0A|=(1<<WGM01) | (1<<WGM00);// fast pwm
  22:	8f b5       	in	r24, 0x2f	; 47
  24:	83 60       	ori	r24, 0x03	; 3
  26:	8f bd       	out	0x2f, r24	; 47
	TCCR0A|=(1<<COM0A1); // пин OC0A не инверсно
  28:	8f b5       	in	r24, 0x2f	; 47
  2a:	80 68       	ori	r24, 0x80	; 128
  2c:	8f bd       	out	0x2f, r24	; 47
	TCCR0B|=(1<<CS00); // без делителя
  2e:	83 b7       	in	r24, 0x33	; 51
  30:	81 60       	ori	r24, 0x01	; 1
  32:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB0); // пин OC0A на выход
  34:	b8 9a       	sbi	0x17, 0	; 23
	OCR0A=100;// начальная скважность.
  36:	84 e6       	ldi	r24, 0x64	; 100
  38:	86 bf       	out	0x36, r24	; 54
  3a:	08 95       	ret

0000003c <adc_ini>:
}


// настройки ацп
void adc_ini(void){
	ADMUX|=(1<<ADLAR);// удобнее забирать 8-битный результат преобразования
  3c:	3d 9a       	sbi	0x07, 5	; 7
	ADMUX|=1; // выбор канала ADC1
  3e:	38 9a       	sbi	0x07, 0	; 7
	
	ADCSRA|=(1<<ADEN); // включить ацп
  40:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA|=(1<<ADPS2); // делитель 16
  42:	32 9a       	sbi	0x06, 2	; 6
  44:	08 95       	ret

00000046 <lamp_control>:
}

// функция контроля скважности ШИМ в зависимости от результата АЦП
void lamp_control(void){
	ADCSRA|=(1<<ADSC); // запуск преобразования
  46:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<<ADSC)));// ожидание окончания преобразования
  48:	36 99       	sbic	0x06, 6	; 6
  4a:	fe cf       	rjmp	.-4      	; 0x48 <lamp_control+0x2>
	OCR0A=ADCH;// в регистр сравнения записать результат преобразования 
  4c:	85 b1       	in	r24, 0x05	; 5
  4e:	86 bf       	out	0x36, r24	; 54
  50:	08 95       	ret

00000052 <main>:
}

int main(void)
{
	pwm_ini();// настройка таймера в режиме генерации ШИМ
  52:	e7 df       	rcall	.-50     	; 0x22 <pwm_ini>
	adc_ini();// настройка АЦП
  54:	f3 df       	rcall	.-26     	; 0x3c <adc_ini>
    while (1) 
    {
		lamp_control();// работаем
  56:	f7 df       	rcall	.-18     	; 0x46 <lamp_control>
  58:	fe cf       	rjmp	.-4      	; 0x56 <main+0x4>

0000005a <_exit>:
  5a:	f8 94       	cli

0000005c <__stop_program>:
  5c:	ff cf       	rjmp	.-2      	; 0x5c <__stop_program>
