;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 03.12.2016
;Author  : shpala
;Company :
;Comments:
;
;
;Chip type               : ATtiny13A
;AVR Core Clock frequency: 1,200000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 16
;*******************************************************/
;
;#define PCF8574A            0x3F
;
;#include <tiny13a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <stdint.h>
;#include <delay.h>
;#include <i2c.h>
;
;// Declare your global variables here
;
;static unsigned char _base_y[4]={0x80,0xc0};

	.DSEG
;unsigned char _lcd_x,_lcd_y,_lcd_maxx;
;
;uint8_t I2C_WRITESEQ(uint8_t slave, uint8_t *seq, uint8_t n)
; 0000 0024 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0025     uint8_t ret = 1;
; 0000 0026     if (i2c_start() && i2c_write(slave << 1)) {
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;	slave -> Y+3
;	*seq -> Y+2
;	n -> Y+1
;	ret -> R16
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0027         uint8_t i;
; 0000 0028         for (i = 0; i < n; i++)
;PCODE: $0000001D VOL: 0
;	slave -> Y+4
;	*seq -> Y+3
;	n -> Y+2
;	i -> Y+0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0029             i2c_write(seq[i]);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002A ret = 0;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002B     }
;PCODE: $00000036 VOL: 0
; 0000 002C     i2c_stop();
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002D     return ret;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002E }
;PCODE: $0000003E VOL: 0
;
;static unsigned char wr_lcd_mode(char c, char mode)
; 0000 0031 {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0032     char ret = 1;
; 0000 0033     char seq[5];
; 0000 0034     static char backlight = 8;

	.DSEG

	.CSEG
; 0000 0035     if (mode == 8) {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;	c -> Y+7
;	mode -> Y+6
;	ret -> R16
;	seq -> Y+1
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0036         backlight = (c != 0) ? 8 : 0;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0037         return I2C_WRITESEQ(PCF8574A, &backlight, 1);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0038     }
; 0000 0039     mode |= backlight;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 003A     seq[0] = mode;                      // EN=0, RW=0, RS=mode
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 003B     seq[1] = (c & 0xF0) | mode | 4;     // EN=1, RW=0, RS=mode
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 003C     seq[2] = seq[1] & ~4;               // EN=0, RW=0, RS=mode
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 003D     seq[3] = (c << 4) | mode | 4;       // EN=1, RW=0, RS=mode
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 003E     seq[4] = seq[3] & ~4;               // EN=0, RW=0, RS=mode
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 003F     ret = I2C_WRITESEQ(PCF8574A, seq, 5);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0040     if (!(mode & 1) && c <= 2)
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0041         delay_ms(2);                    // CLS and HOME
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0042     return ret;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0043 }
;PCODE: $00000090 VOL: 0
;
;void lcd_gotoxy(unsigned char x, unsigned char y)
; 0000 0046 {
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0047     wr_lcd_mode(0x80 | (_base_y[y] + x), 0);   //.kbv now use +
;PCODE: $00000093 VOL: 0
;	x -> Y+1
;	y -> Y+0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0048     _lcd_x=x;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0049     _lcd_y=y;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 004A }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;
;void lcd_init(unsigned char lcd_columns)
; 0000 004D {
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 004E     char i;
; 0000 004F     // High-Nibble von Byte 8 = Display Control:
; 0000 0050     // 1DCB****  D: Disp on/off; C: Cursor on/off  B: blink on/off
; 0000 0051     char init_sequenz[] = { 0x33, 0x32, 0x28, 0x0C, 0x06, 0x01 };
; 0000 0052     _lcd_maxx = lcd_columns;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;	lcd_columns -> Y+7
;	i -> R16
;	init_sequenz -> Y+1
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0053     _base_y[2] = _base_y[0] + _lcd_maxx;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0054     _base_y[3] = _base_y[1] + _lcd_maxx;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0055     i2c_init();
;PCODE: $000000C1 VOL: 0
; 0000 0056     delay_ms(30);               // 30 ms Delay nach power-up
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0057     for (i = 0; i < sizeof(init_sequenz); i++) {
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0058         wr_lcd_mode(init_sequenz[i], 0);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0059         delay_ms(5);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 005A     }
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 005B }
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;
;void lcd_putchar(char c)
; 0000 005E {
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 005F     if (_lcd_x>=_lcd_maxx || c == '\n')
;PCODE: $000000E3 VOL: 0
;	c -> Y+0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0060     {
; 0000 0061         lcd_gotoxy(0,++_lcd_y);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0062     }
; 0000 0063     if (c != '\n') {
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0064         ++_lcd_x;
;PCODE: $000000F5 VOL: 0
; 0000 0065         wr_lcd_mode(c, 1);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0066     }
; 0000 0067 }
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;
;void lcd_puts(char flash *str)
; 0000 006A {
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 006B     while (*str) lcd_putchar(*str++);
;PCODE: $00000100 VOL: 0
;	*str -> Y+0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 006C }
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;
;void main(void)
; 0000 006F {
;PCODE: $00000111 VOL: 0
; 0000 0070 // Declare your local variables here
; 0000 0071 
; 0000 0072 // Crystal Oscillator division factor: 1
; 0000 0073 #pragma optsize-
; 0000 0074 CLKPR=(1<<CLKPCE);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0075 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0076 #ifdef _OPTIMIZE_SIZE_
; 0000 0077 #pragma optsize+
; 0000 0078 #endif
; 0000 0079 
; 0000 007A // Input/Output Ports initialization
; 0000 007B // Port B initialization
; 0000 007C // Function: Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007D DDRB=(0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 007E // State: Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007F PORTB=(0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0080 
; 0000 0081 // Bit-Banged I2C Bus initialization
; 0000 0082 // I2C Port: PORTB
; 0000 0083 // I2C SDA bit: 0
; 0000 0084 // I2C SCL bit: 1
; 0000 0085 // Bit Rate: 100 kHz
; 0000 0086 // Note: I2C settings are specified in the
; 0000 0087 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 0088 i2c_init();
;PCODE: $0000011A VOL: 0
; 0000 0089 
; 0000 008A lcd_init(16);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 008B 
; 0000 008C while (1)
;PCODE: $0000011D VOL: 0
; 0000 008D {
; 0000 008E     lcd_gotoxy(0,0);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 008F 
; 0000 0090     lcd_puts("Hello drive2.ru!");
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0091     lcd_gotoxy(0,1);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0092     lcd_puts("test LCD1602 i2c");
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0093 }
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0094 }
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
