
Attiny13-IR-sharp-decoder-to-UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000268  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a35  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c6  00000000  00000000  00000e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047d  00000000  00000000  000013cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001848  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000477  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000218f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e8 e6       	ldi	r30, 0x68	; 104
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a6 36       	cpi	r26, 0x66	; 102
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>
  32:	48 d0       	rcall	.+144    	; 0xc4 <main>
  34:	17 c1       	rjmp	.+558    	; 0x264 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <_Z7IR_initv>:
#include "IR.h"

void IR_init() {
		IR_DDR &= ~(1<<IR_PIN);
  38:	26 b3       	in	r18, 0x16	; 22
  3a:	47 b3       	in	r20, 0x17	; 23
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	bc 01       	movw	r22, r24
  42:	02 c0       	rjmp	.+4      	; 0x48 <__SREG__+0x9>
  44:	66 0f       	add	r22, r22
  46:	77 1f       	adc	r23, r23
  48:	2a 95       	dec	r18
  4a:	e2 f7       	brpl	.-8      	; 0x44 <__SREG__+0x5>
  4c:	9b 01       	movw	r18, r22
  4e:	20 95       	com	r18
  50:	30 95       	com	r19
  52:	24 23       	and	r18, r20
  54:	27 bb       	out	0x17, r18	; 23
		IR_PORT &= ~(1<<IR_PIN);
  56:	36 b3       	in	r19, 0x16	; 22
  58:	28 b3       	in	r18, 0x18	; 24
  5a:	02 c0       	rjmp	.+4      	; 0x60 <__SREG__+0x21>
  5c:	88 0f       	add	r24, r24
  5e:	99 1f       	adc	r25, r25
  60:	3a 95       	dec	r19
  62:	e2 f7       	brpl	.-8      	; 0x5c <__SREG__+0x1d>
  64:	80 95       	com	r24
  66:	90 95       	com	r25
  68:	82 23       	and	r24, r18
  6a:	88 bb       	out	0x18, r24	; 24
  6c:	08 95       	ret

0000006e <_Z7IR_readv>:
}

unsigned int IR_read() {
  6e:	40 e0       	ldi	r20, 0x00	; 0
  70:	50 e0       	ldi	r21, 0x00	; 0
	
	unsigned char time_IR; // переменна€ хранени€ времени пауз
	bool IR_bit; // переменна€ дл€ считанного бита
	unsigned int IR_block=0; // переменна€ дл€ хранени€ всего прин€того блока.
  72:	60 e0       	ldi	r22, 0x00	; 0
  74:	70 e0       	ldi	r23, 0x00	; 0
			if (time_IR>250) break; // если тайминг более 1680	мкс значит случилс€ конец передачи
		}
		
		if (time_IR < 70) IR_bit=0; // если тайминг меньше 70 значит 0
		else IR_bit=1; // иначе  1
		IR_block |=IR_bit<<i; // пишем бит в переменную
  76:	e1 e0       	ldi	r30, 0x01	; 1
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	f0 e0       	ldi	r31, 0x00	; 0
	bool IR_bit; // переменна€ дл€ считанного бита
	unsigned int IR_block=0; // переменна€ дл€ хранени€ всего прин€того блока.
	for ( char i=0; i<15; i++) {
		
		time_IR=0;            // обнул€ем тайминг
		while(!(IR_PIN & 1<<IR)) { //ждем пока шина поднимитьс€ в 1
  7e:	b4 99       	sbic	0x16, 4	; 22
  80:	03 c0       	rjmp	.+6      	; 0x88 <_Z7IR_readv+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	00 c0       	rjmp	.+0      	; 0x84 <_Z7IR_readv+0x16>
  84:	b4 9b       	sbis	0x16, 4	; 22
  86:	fd cf       	rjmp	.-6      	; 0x82 <_Z7IR_readv+0x14>

unsigned int IR_read() {
	
	unsigned char time_IR; // переменна€ хранени€ времени пауз
	bool IR_bit; // переменна€ дл€ считанного бита
	unsigned int IR_block=0; // переменна€ дл€ хранени€ всего прин€того блока.
  88:	90 e0       	ldi	r25, 0x00	; 0
		time_IR=0;            // обнул€ем тайминг
		while(!(IR_PIN & 1<<IR)) { //ждем пока шина поднимитьс€ в 1
			_delay_us(1);
			
		}
		while ((IR_PIN & 1<<IR)) { // пока шина 1 увеличиваем тайминг на 1, каждые 10 мкс
  8a:	b4 9b       	sbis	0x16, 4	; 22
  8c:	06 c0       	rjmp	.+12     	; 0x9a <_Z7IR_readv+0x2c>
  8e:	24 e0       	ldi	r18, 0x04	; 4
  90:	2a 95       	dec	r18
  92:	f1 f7       	brne	.-4      	; 0x90 <_Z7IR_readv+0x22>
			
			_delay_us(10);
			time_IR++;
  94:	9f 5f       	subi	r25, 0xFF	; 255
			if (time_IR>250) break; // если тайминг более 1680	мкс значит случилс€ конец передачи
  96:	9b 3f       	cpi	r25, 0xFB	; 251
  98:	c1 f7       	brne	.-16     	; 0x8a <_Z7IR_readv+0x1c>
		}
		
		if (time_IR < 70) IR_bit=0; // если тайминг меньше 70 значит 0
		else IR_bit=1; // иначе  1
		IR_block |=IR_bit<<i; // пишем бит в переменную
  9a:	2e 2f       	mov	r18, r30
  9c:	38 2f       	mov	r19, r24
  9e:	96 34       	cpi	r25, 0x46	; 70
  a0:	10 f4       	brcc	.+4      	; 0xa6 <__stack+0x7>
  a2:	2a 2f       	mov	r18, r26
  a4:	3f 2f       	mov	r19, r31
  a6:	04 2e       	mov	r0, r20
  a8:	02 c0       	rjmp	.+4      	; 0xae <__stack+0xf>
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	0a 94       	dec	r0
  b0:	e2 f7       	brpl	.-8      	; 0xaa <__stack+0xb>
  b2:	62 2b       	or	r22, r18
  b4:	73 2b       	or	r23, r19
  b6:	4f 5f       	subi	r20, 0xFF	; 255
  b8:	5f 4f       	sbci	r21, 0xFF	; 255
unsigned int IR_read() {
	
	unsigned char time_IR; // переменна€ хранени€ времени пауз
	bool IR_bit; // переменна€ дл€ считанного бита
	unsigned int IR_block=0; // переменна€ дл€ хранени€ всего прин€того блока.
	for ( char i=0; i<15; i++) {
  ba:	4f 30       	cpi	r20, 0x0F	; 15
  bc:	51 05       	cpc	r21, r1
  be:	f9 f6       	brne	.-66     	; 0x7e <_Z7IR_readv+0x10>
		IR_block |=IR_bit<<i; // пишем бит в переменную


	}
	return IR_block;
  c0:	cb 01       	movw	r24, r22
  c2:	08 95       	ret

000000c4 <main>:



unsigned int IR_block=0;// переменна€ пакета переданного по » 

uart_init(); // инициализируем уарт
  c4:	36 d0       	rcall	.+108    	; 0x132 <_Z9uart_initv>
IR_init(); // инит » 
  c6:	b8 df       	rcall	.-144    	; 0x38 <_Z7IR_initv>

    while (1) 
    {
		
			
		if (!(IR_PIN & 1<<IR)) // если сигнал 0 начинаем читать посылку
  c8:	b4 99       	sbic	0x16, 4	; 22
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <main+0x4>
		 { 
			IR_block = IR_read(); // читаем посылку
  cc:	d0 df       	rcall	.-96     	; 0x6e <_Z7IR_readv>
			uart_print (IR_block); // отправл€ем в уарт
  ce:	39 d0       	rcall	.+114    	; 0x142 <_Z10uart_printj>
  d0:	fb cf       	rjmp	.-10     	; 0xc8 <main+0x4>

000000d2 <_Z11bit_bang_txh>:
#include "UART.h"

//----------- функци€ отправки байта ------------------------
void bit_bang_tx(unsigned char data) {
	unsigned char i;
	uart_PORT &=~ (1<<uart_PIN);         // старт бит
  d2:	c3 98       	cbi	0x18, 3	; 24
	TCNT0 = 0;
  d4:	12 be       	out	0x32, r1	; 50
	while (TCNT0 < uart_delay); // ожидаем
  d6:	92 b7       	in	r25, 0x32	; 50
  d8:	9f 31       	cpi	r25, 0x1F	; 31
  da:	e8 f3       	brcs	.-6      	; 0xd6 <_Z11bit_bang_txh+0x4>
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
	for (i = 0; i < 8; i++) { // отправка с младщего бита
		if (data & (0x01 << i)) uart_PORT |= (1<<uart_PIN);
  e0:	48 2f       	mov	r20, r24
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	ca 01       	movw	r24, r20
  e6:	02 2e       	mov	r0, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <_Z11bit_bang_txh+0x1c>
  ea:	95 95       	asr	r25
  ec:	87 95       	ror	r24
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <_Z11bit_bang_txh+0x18>
  f2:	80 ff       	sbrs	r24, 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <_Z11bit_bang_txh+0x28>
  f6:	c3 9a       	sbi	0x18, 3	; 24
  f8:	01 c0       	rjmp	.+2      	; 0xfc <_Z11bit_bang_txh+0x2a>
		else uart_PORT &=~ (1<<uart_PIN);
  fa:	c3 98       	cbi	0x18, 3	; 24
		while (TCNT0 < uart_delay); // ожидаем
  fc:	82 b7       	in	r24, 0x32	; 50
  fe:	8f 31       	cpi	r24, 0x1F	; 31
 100:	e8 f3       	brcs	.-6      	; 0xfc <_Z11bit_bang_txh+0x2a>
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	3f 4f       	sbci	r19, 0xFF	; 255
void bit_bang_tx(unsigned char data) {
	unsigned char i;
	uart_PORT &=~ (1<<uart_PIN);         // старт бит
	TCNT0 = 0;
	while (TCNT0 < uart_delay); // ожидаем
	for (i = 0; i < 8; i++) { // отправка с младщего бита
 106:	28 30       	cpi	r18, 0x08	; 8
 108:	31 05       	cpc	r19, r1
 10a:	61 f7       	brne	.-40     	; 0xe4 <_Z11bit_bang_txh+0x12>
		if (data & (0x01 << i)) uart_PORT |= (1<<uart_PIN);
		else uart_PORT &=~ (1<<uart_PIN);
		while (TCNT0 < uart_delay); // ожидаем
	}
	uart_PORT |= (1<<uart_PIN);        // стоп бит
 10c:	c3 9a       	sbi	0x18, 3	; 24
	while (TCNT0 < uart_delay); // ожидаем
 10e:	82 b7       	in	r24, 0x32	; 50
 110:	8f 31       	cpi	r24, 0x1F	; 31
 112:	e8 f3       	brcs	.-6      	; 0x10e <_Z11bit_bang_txh+0x3c>
}
 114:	08 95       	ret

00000116 <_Z15bit_bang_tx_strPc>:
//-----------------------------------------------------------

//------------- фунци€ отправки строки-----------------------
void bit_bang_tx_str(char *str) {
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	ec 01       	movw	r28, r24
	while (*str) bit_bang_tx(*str++);
 11c:	88 81       	ld	r24, Y
 11e:	88 23       	and	r24, r24
 120:	29 f0       	breq	.+10     	; 0x12c <_Z15bit_bang_tx_strPc+0x16>
 122:	21 96       	adiw	r28, 0x01	; 1
 124:	d6 df       	rcall	.-84     	; 0xd2 <_Z11bit_bang_txh>
 126:	89 91       	ld	r24, Y+
 128:	81 11       	cpse	r24, r1
 12a:	fc cf       	rjmp	.-8      	; 0x124 <_Z15bit_bang_tx_strPc+0xe>
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <_Z9uart_initv>:


//-------------- просто инициализаци€-------------------------
void uart_init() {
	//-------------- настройка таймера дл€ UART -------------------------
	TCCR0A = 0x02;  // таймер вкючаем в режим CTC
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = 0x02;  // делитель на 8
 136:	83 bf       	out	0x33, r24	; 51
	OCR0A  = uart_delay; // регистр сравнени€
 138:	8f e1       	ldi	r24, 0x1F	; 31
 13a:	86 bf       	out	0x36, r24	; 54
	//-------------------------------------------------------------------
	//-------настройка порта------------------
	uart_DDR |= (1<<uart_PIN);
 13c:	bb 9a       	sbi	0x17, 3	; 23
	uart_PORT |= (1<<uart_PIN);
 13e:	c3 9a       	sbi	0x18, 3	; 24
 140:	08 95       	ret

00000142 <_Z10uart_printj>:
}
//-----------------------------------------------------------


// -------------- отправка данных в порт -------------
void uart_print (unsigned int IR_block) {
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	dd 27       	eor	r29, r29
 152:	ca 50       	subi	r28, 0x0A	; 10
 154:	cd bf       	out	0x3d, r28	; 61
 156:	8c 01       	movw	r16, r24

unsigned char adress;
unsigned char command;
bool exp;
bool chk;
char str[10] = {0}; // массив дл€ строки. обнуленный на вс€к.случ.
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	7c 01       	movw	r14, r24
 15e:	8a e0       	ldi	r24, 0x0A	; 10
 160:	f7 01       	movw	r30, r14
 162:	11 92       	st	Z+, r1
 164:	8a 95       	dec	r24
 166:	e9 f7       	brne	.-6      	; 0x162 <_Z10uart_printj+0x20>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 168:	80 2f       	mov	r24, r16
 16a:	8f 71       	andi	r24, 0x1F	; 31
 16c:	40 e1       	ldi	r20, 0x10	; 16
 16e:	b7 01       	movw	r22, r14
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	4f d0       	rcall	.+158    	; 0x212 <__utoa_ncheck>
// 1#e9#0#1#23841
// делителем выступает символ #. adress и command 16-тиричные, exp и chk двоичные, IR_block дес€тичное.


utoa(adress,str,16); // конвертим адрес в 16-тиричное и записываем јЌ—ии коды в массив стр
bit_bang_tx_str((char *)str); // отправл€ем массив
 174:	c7 01       	movw	r24, r14
 176:	cf df       	rcall	.-98     	; 0x116 <_Z15bit_bang_tx_strPc>
 178:	c8 01       	movw	r24, r16
 17a:	80 7e       	andi	r24, 0xE0	; 224
 17c:	9f 71       	andi	r25, 0x1F	; 31
 17e:	40 e1       	ldi	r20, 0x10	; 16
 180:	b7 01       	movw	r22, r14
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	92 95       	swap	r25
 188:	82 95       	swap	r24
 18a:	8f 70       	andi	r24, 0x0F	; 15
 18c:	89 27       	eor	r24, r25
 18e:	9f 70       	andi	r25, 0x0F	; 15
 190:	89 27       	eor	r24, r25
 192:	3f d0       	rcall	.+126    	; 0x212 <__utoa_ncheck>

utoa(command,str,16); // конвертим команд в 16-тиричное и записываем јЌ—ии коды в массив стр
bit_bang_tx_str("#"); // отправл€ем в порт текст
 194:	80 e6       	ldi	r24, 0x60	; 96
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	be df       	rcall	.-132    	; 0x116 <_Z15bit_bang_tx_strPc>
bit_bang_tx_str((char *)str); // отправл€ем массив
 19a:	c7 01       	movw	r24, r14
 19c:	bc df       	rcall	.-136    	; 0x116 <_Z15bit_bang_tx_strPc>
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	15 fd       	sbrc	r17, 5
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <_Z10uart_printj+0x68>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	42 e0       	ldi	r20, 0x02	; 2
 1ac:	be 01       	movw	r22, r28
 1ae:	6f 5f       	subi	r22, 0xFF	; 255
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255
 1b2:	2f d0       	rcall	.+94     	; 0x212 <__utoa_ncheck>

utoa(exp,str,2); // конвертим эксп в 2-ичное и записываем јЌ—ии коды в массив стр
bit_bang_tx_str("#"); // отправл€ем в порт текст
 1b4:	80 e6       	ldi	r24, 0x60	; 96
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	ae df       	rcall	.-164    	; 0x116 <_Z15bit_bang_tx_strPc>
bit_bang_tx_str((char *)str); // отправл€ем массив
 1ba:	ce 01       	movw	r24, r28
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	ab df       	rcall	.-170    	; 0x116 <_Z15bit_bang_tx_strPc>
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	16 fd       	sbrc	r17, 6
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <_Z10uart_printj+0x8a>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	42 e0       	ldi	r20, 0x02	; 2
 1ce:	be 01       	movw	r22, r28
 1d0:	6f 5f       	subi	r22, 0xFF	; 255
 1d2:	7f 4f       	sbci	r23, 0xFF	; 255
 1d4:	1e d0       	rcall	.+60     	; 0x212 <__utoa_ncheck>

utoa(chk,str,2); // конвертим чек в 2-ичное и записываем јЌ—ии коды в массив стр
bit_bang_tx_str("#"); // отправл€ем в порт текст
 1d6:	80 e6       	ldi	r24, 0x60	; 96
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	9d df       	rcall	.-198    	; 0x116 <_Z15bit_bang_tx_strPc>
bit_bang_tx_str((char *)str); // отправл€ем массив
 1dc:	ce 01       	movw	r24, r28
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	9a df       	rcall	.-204    	; 0x116 <_Z15bit_bang_tx_strPc>
 1e2:	4a e0       	ldi	r20, 0x0A	; 10
 1e4:	be 01       	movw	r22, r28
 1e6:	6f 5f       	subi	r22, 0xFF	; 255
 1e8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ea:	c8 01       	movw	r24, r16
 1ec:	12 d0       	rcall	.+36     	; 0x212 <__utoa_ncheck>

utoa(IR_block,str,10); // конвертим весь блок  в 10-тичное и записываем јЌ—ии коды в массив стр
bit_bang_tx_str("#"); // отправл€ем в порт текст
 1ee:	80 e6       	ldi	r24, 0x60	; 96
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	91 df       	rcall	.-222    	; 0x116 <_Z15bit_bang_tx_strPc>
bit_bang_tx_str((char *)str); // отправл€ем массив
 1f4:	ce 01       	movw	r24, r28
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	8e df       	rcall	.-228    	; 0x116 <_Z15bit_bang_tx_strPc>

bit_bang_tx_str("\r\n"); // отправл€ем символы перехода на новую строку
 1fa:	82 e6       	ldi	r24, 0x62	; 98
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	8b df       	rcall	.-234    	; 0x116 <_Z15bit_bang_tx_strPc>

}
 200:	c6 5f       	subi	r28, 0xF6	; 246
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	08 95       	ret

00000212 <__utoa_ncheck>:
 212:	bb 27       	eor	r27, r27

00000214 <__utoa_common>:
 214:	fb 01       	movw	r30, r22
 216:	55 27       	eor	r21, r21
 218:	aa 27       	eor	r26, r26
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	aa 1f       	adc	r26, r26
 220:	a4 17       	cp	r26, r20
 222:	10 f0       	brcs	.+4      	; 0x228 <__utoa_common+0x14>
 224:	a4 1b       	sub	r26, r20
 226:	83 95       	inc	r24
 228:	50 51       	subi	r21, 0x10	; 16
 22a:	b9 f7       	brne	.-18     	; 0x21a <__utoa_common+0x6>
 22c:	a0 5d       	subi	r26, 0xD0	; 208
 22e:	aa 33       	cpi	r26, 0x3A	; 58
 230:	08 f0       	brcs	.+2      	; 0x234 <__utoa_common+0x20>
 232:	a9 5d       	subi	r26, 0xD9	; 217
 234:	a1 93       	st	Z+, r26
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	79 f7       	brne	.-34     	; 0x218 <__utoa_common+0x4>
 23a:	b1 11       	cpse	r27, r1
 23c:	b1 93       	st	Z+, r27
 23e:	11 92       	st	Z+, r1
 240:	cb 01       	movw	r24, r22
 242:	00 c0       	rjmp	.+0      	; 0x244 <strrev>

00000244 <strrev>:
 244:	dc 01       	movw	r26, r24
 246:	fc 01       	movw	r30, r24
 248:	67 2f       	mov	r22, r23
 24a:	71 91       	ld	r23, Z+
 24c:	77 23       	and	r23, r23
 24e:	e1 f7       	brne	.-8      	; 0x248 <strrev+0x4>
 250:	32 97       	sbiw	r30, 0x02	; 2
 252:	04 c0       	rjmp	.+8      	; 0x25c <strrev+0x18>
 254:	7c 91       	ld	r23, X
 256:	6d 93       	st	X+, r22
 258:	70 83       	st	Z, r23
 25a:	62 91       	ld	r22, -Z
 25c:	ae 17       	cp	r26, r30
 25e:	bf 07       	cpc	r27, r31
 260:	c8 f3       	brcs	.-14     	; 0x254 <strrev+0x10>
 262:	08 95       	ret

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
