
Atmega8_7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000b8  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a6  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a9  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000295  00000000  00000000  00000e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fa  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e9  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 eb       	ldi	r30, 0xB8	; 184
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	10 d0       	rcall	.+32     	; 0x6a <main>
  4a:	34 c0       	rjmp	.+104    	; 0xb4 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <display>:
#include <util/delay.h>

uint8_t digit[]={63,6,91,79,102,109,125,7,127,111};

void display(uint8_t n, uint8_t dot){
	if (n<10)
  4e:	8a 30       	cpi	r24, 0x0A	; 10
  50:	38 f4       	brcc	.+14     	; 0x60 <display+0x12>
	{
		PORTD=digit[n];
  52:	e8 2f       	mov	r30, r24
  54:	f0 e0       	ldi	r31, 0x00	; 0
  56:	e0 5a       	subi	r30, 0xA0	; 160
  58:	ff 4f       	sbci	r31, 0xFF	; 255
  5a:	80 81       	ld	r24, Z
  5c:	82 bb       	out	0x12, r24	; 18
  5e:	02 c0       	rjmp	.+4      	; 0x64 <display+0x16>
	} else {
		PORTD=121;
  60:	89 e7       	ldi	r24, 0x79	; 121
  62:	82 bb       	out	0x12, r24	; 18
	}
	
	if(dot) PORTD|=(1<<7);
  64:	61 11       	cpse	r22, r1
  66:	97 9a       	sbi	0x12, 7	; 18
  68:	08 95       	ret

0000006a <main>:
}

int main(void)
{
	DDRD=255;
  6a:	8f ef       	ldi	r24, 0xFF	; 255
  6c:	81 bb       	out	0x11, r24	; 17
	
	display(7,0);
  6e:	60 e0       	ldi	r22, 0x00	; 0
  70:	87 e0       	ldi	r24, 0x07	; 7
  72:	ed df       	rcall	.-38     	; 0x4e <display>
    while (1) 
    {
		for (uint8_t i=0; i<10; i++)
  74:	c0 e0       	ldi	r28, 0x00	; 0
		{
			display(i,0);
  76:	60 e0       	ldi	r22, 0x00	; 0
  78:	8c 2f       	mov	r24, r28
  7a:	e9 df       	rcall	.-46     	; 0x4e <display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	2f e9       	ldi	r18, 0x9F	; 159
  7e:	86 e8       	ldi	r24, 0x86	; 134
  80:	91 e0       	ldi	r25, 0x01	; 1
  82:	21 50       	subi	r18, 0x01	; 1
  84:	80 40       	sbci	r24, 0x00	; 0
  86:	90 40       	sbci	r25, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x18>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x22>
  8c:	00 00       	nop
	DDRD=255;
	
	display(7,0);
    while (1) 
    {
		for (uint8_t i=0; i<10; i++)
  8e:	cf 5f       	subi	r28, 0xFF	; 255
  90:	ca 30       	cpi	r28, 0x0A	; 10
  92:	89 f7       	brne	.-30     	; 0x76 <main+0xc>
  94:	c9 e0       	ldi	r28, 0x09	; 9
			_delay_ms(500);
		}
		
		for (uint8_t i=9; i>0; i--)
		{
			display(i,1);
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	8c 2f       	mov	r24, r28
  9a:	d9 df       	rcall	.-78     	; 0x4e <display>
  9c:	2f e9       	ldi	r18, 0x9F	; 159
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x38>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x42>
  ac:	00 00       	nop
		{
			display(i,0);
			_delay_ms(500);
		}
		
		for (uint8_t i=9; i>0; i--)
  ae:	c1 50       	subi	r28, 0x01	; 1
  b0:	91 f7       	brne	.-28     	; 0x96 <main+0x2c>
  b2:	e0 cf       	rjmp	.-64     	; 0x74 <main+0xa>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
