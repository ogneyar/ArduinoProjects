#include "iarduino_DHT.h"																													//
																																			//
		iarduino_DHT::iarduino_DHT(uint8_t i){PinDHT=i;}																					//
																																			//	Датчики DHT11 и DHT22 возвращают пакет из 5 байт.
int8_t	iarduino_DHT::read(){																												//	Первые два байта - влажность, следующие два байта - температура и последний байт - контрольная сумма
//		Читаем данные на линии SDA:																											//	Датчик DHT22 может измерять отрицателоьные температуры, о чем свидетельствует старший бит старшего байта температуры.
		int8_t i=readSDA(); if(i<0){return i;}																								//
//		Записываем полученные данные в переменные (с учётом модели и знака температуры):													//	Предположим получены данные: 0x03 0x00 0x01 0x00 0x04, тогда:
		hum=float(reply[1]+(model==11?reply[0]: reply[0]      <<8))*(model==11?1:                    0.1 );									//	Для DHT11: первый байт это целая часть влажности, второй байт это дробная часть влажности, третий байт это целая часть температуры, четыёртый байт это дробная часть температуры. Получается RH>=3,0% t>=1,0°C.
		tem=float(reply[3]+(model==11?reply[2]:(reply[2]&0x7F)<<8))*(model==11?1:(reply[2]&0x80?-0.1:0.1));									//	Для DHT22: первый и второй байт это влажность в десятых долях процентов, третий и четвёртый байт это температура в десятых долях градуса. Получается RH>=76,8% t>=25,6°C.
		return 0;																															//
}																																			//
																																			//
int8_t	iarduino_DHT::readSDA(){																											//
//		Обнуляем массив reply:																												//
		reply[0]=reply[1]=reply[2]=reply[3]=reply[4]=0;																						//
//		Прижимаем линию SDA к земле на 25мс:																								//
		pinMode(PinDHT,OUTPUT); digitalWrite(PinDHT,LOW); delay(25);																		//
//		Отпускаем линию SDA:																												//
		pinMode(PinDHT,INPUT);																												// На линии появится уровень логической 1 через подтягивающий резистор.
//		Проверяем реакцию датчика на сигнал "старт":																						//
		if(pulseIn(PinDHT,HIGH,600)==0){return DHT_ERROR_NO_REPLY;}																			// Ждем появление импульса (логическая 1 длительностью ≈ 80мкс). Если в течении 600 мск этот импульс не появился то возвращаем ошибку DHT_ERROR_NO_REPLY.
//		Читаем ответ датчика (40 бит данных помещаем в 5 байт массива reply):																//
		for(int i=0,j=0; i<40; i++){j=pulseIn(PinDHT,HIGH,600); if(j){reply[i/8]<<=1; reply[i/8]+=j>50?1:0;}else{return DHT_ERROR_DATA;}}	// Если импульс >45 мкс то считаем его как «1», а если меньше, то как «0», а если импульса нет дольше 600 мкс, то возвращаем ошибку DHT_ERROR_DATA.
//		Проверяем не отправляет ли датчик больше 40 бит данных:																				//
		if(pulseIn(PinDHT,HIGH,600)>0){return DHT_ERROR_DATA;}																				// Если импульсы от датчика продолжают приходить, то возвращаем ошибку DHT_ERROR_DATA.
//		Проверяем контрольную сумму:																										//
		if(((reply[0]+reply[1]+reply[2]+reply[3])&0xff)!=reply[4]){return DHT_ERROR_CHECKSUM;}												// Если контрольная сумма не совпала, то возвращаем ошибку DHT_ERROR_CHECKSUM.
//		Определяем модель сенсора:																											//
		if( (reply[0]>=4) || (reply[2]>=4) )						{ model=11; } else														// Датчик определён как DHT11, так как для DHT22 указанные значения означают RH>=102,4% t>=102,4°C.
		if( (reply[0]==0) || (reply[1]!=0) || (reply[2]&0x80>0) )	{ model=22; }															// Датчик определён как DHT22, так как DHT11 возвращает влажность более 10%, без десятых долей, а температуру без отрицательных значений.
//		Датчик DHT11 определяется при влажности более 3%, или температуре более 3°С.														//
//		Датчик DHT22 определяется при влажности ниже 26%, или любой влажности с цифрой в дробной части, или температуре ниже 0°С.			//
//		Если в данной функции датчик определить не удалось, то будет использовано значение model определённое ранее							//
		return DHT_OK;																														//
}																																			//